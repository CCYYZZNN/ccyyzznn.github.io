<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【JS高级程序设计】第五章 引用类型</title>
      <link href="/passages/%E3%80%90JS%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%91%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
      <url>/passages/%E3%80%90JS%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%91%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用类型的值（对象）是引用类型的一个实例。在 ECMAScript 中，引用类型是一种数据结构， 用于将数据和功能组织在一起。它也常被称为类，但这种称呼并不妥当。尽管 ECMAScript 从技术上讲是一门面向对象的语言，但它不具备传统的面向对象语言所支持的类和接口等基本结构。引 用类型有时候也被称为对象定义，因为它们描述的是一类对象所具有的属性和方法。</p></blockquote><p>如前所述，对象是某个特定引用类型的实例。新对象是使用 new 操作符后跟一个构造函数来创建的。 构造函数本身就是一个函数，只不过该函数是出于创建新对象的目的而定义的。</p><p><code>var person = new Object();</code></p><h1 id="5-1-Object-类型"><a href="#5-1-Object-类型" class="headerlink" title="5.1 Object 类型"></a>5.1 Object 类型</h1><blockquote><p>到目前为止， 我们看到的大多数引用类型值都是 Object 类型的实例；而且， Object 也是 ECMAScript 中使用最多的一个类型。虽然 Object 的实例不具备多少功能，但对于在应用程序中存储 和传输数据而言，它们确实是非常理想的选择。</p></blockquote><p>创建 Object 实例的方式有两种。第一种是使用 new 操作符后跟 Object 构造函数</p><pre><code class="js">var person = new Object()person.name = &#39;tom&#39;person.age = 18</code></pre><p>另一种方式是使用对象字面量表示法。对象字面量是对象定义的一种简写形式，目的在于简化创建 包含大量属性的对象的过程。下面这个例子就使用了对象字面量语法定义了与前面那个例子中相同的 person 对象：</p><pre><code class="js">var person = {  name : &#39;tom&#39;,  age : 18}</code></pre><p>在使用对象字面量语法时，属性名也可以使用字符串</p><pre><code class="js">var person = {  &quot;name&quot; : &#39;tom&#39;,  &quot;age&quot; : 18,  5 : true}</code></pre><p>一般来说，访问对象属性时使用的都是点表示法，这也是很多面向对象语言中通用的语法。不过， 在 JavaScript 也可以使用方括号表示法来访问对象的属性。在使用方括号语法时，应该将要访问的属性 以字符串的形式放在方括号中</p><p>如果属性名中包含会导致语法错误的字符，或者属性名使用的是关键字或保留字，也可以使用方括 号表示法。</p><p><code>person[&quot;first name&quot;] = &quot;Nicholas&quot;;</code></p><h1 id="5-2-Array类型"><a href="#5-2-Array类型" class="headerlink" title="5.2 Array类型"></a>5.2 Array类型</h1><p>除了 Object 之外，Array 类型恐怕是 ECMAScript 中最常用的类型了。而且，ECMAScript 中 的数组与其他多数语言中的数组有着相当大的区别。虽然 ECMAScript 数组与其他语言中的数组都是 数据的有序列表，但与其他语言不同的是，ECMAScript 数组的每一项可以保存任何类型的数据。 也 就是说，可以用数组的第一个位置来保存字符串，用第二位置来保存数值，用第三个位置来保存对象， 以此类推，而且，ECMAScript 数组的大小是可以动态调整的，即可以随着数据的添加自动增长以容 纳新增数据</p><p>创建数组的方法1:</p><p><code>var arr = new Array()</code></p><p>如果预先知道数组要保存的项目数量，也可以给构造函数传递该数量，而该数量会自动变成 length 属性的值。</p><p><code>var arr = new Array(20)</code>// 创建了一个长度为20的数组</p><p>也可以向 Array 构造函数传递数组中应该包含的项。以下代码创建了一个包含 3 个字符串值的数组</p><p><code>var colors = new Array(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)</code></p><blockquote><p>当然，给构造函数传递一个值也可以创建数组。但这时候问题就复杂一点了，因为如果传递的是数 值，则会按照该数值创建包含给定项数的数组；而如果传递的是其他类型的参数，则会创建包含那个值 的只有一项的数组。</p></blockquote><pre><code class="js">var arr = new Array(3) //创建一个3个长度的数组var arr = new Array(&#39;sa&#39;) //创建为长度为1的sa</code></pre><blockquote><p>另外，在使用 Array 构造函数时也可以省略 new 操作符</p></blockquote><h2 id="5-2-1-检测数组"><a href="#5-2-1-检测数组" class="headerlink" title="5.2.1 检测数组"></a>5.2.1 检测数组</h2><blockquote><p>instanceof 操作符的问题在于，它假定只有一个全局执行环境。如果网页中包含多个框架，那实 际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的 Array 构造函数。如果你从 一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自 不同的构造函数。</p></blockquote><p>为了解决这个问题，ECMAScript 5 新增了 Array.isArray()方法。这个方法的目的是最终确定某 个值到底是不是数组，而不管它是在哪个全局执行环境中创建的。</p><p><code>Array.isArray([]) //true</code></p><h2 id="5-2-2-转换方法"><a href="#5-2-2-转换方法" class="headerlink" title="5.2.2 转换方法"></a>5.2.2 转换方法</h2><p>如前所述，所有对象都具有 toLocaleString()、toString()和 valueOf()方法。其中，调用 数组的 toString()方法会返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串。而 调用 valueOf()返回的还是数组。实际上，为了创建这个字符串会调用数组每一项的 toString()方 法。</p><pre><code class="js">var colors = [&#39;red&#39;,&#39;blue&#39;,&#39;green&#39;]alert(colors.toString()) // red,blue,greenalert(colors.valueOf()) // red,blue,greenalert(colors) // red,blue,green</code></pre><p>在这里，我们首先显式地调用了 toString()方法，以便返回数组的字符串表示，每个值的字符串 表示拼接成了一个字符串，中间以逗号分隔。接着调用 valueOf()方法，而最后一行代码直接将数组 传递给了 alert()。由于 alert()要接收字符串参数，所以它会在后台调用 toString()方法，由此 会得到与直接调用 toString()方法相同的结果。</p><p>另外，toLocaleString()方法经常也会返回与 toString()和 valueOf()方法相同的值，但也 不总是如此。当调用数组的 toLocaleString()方法时，它也会创建一个数组值的以逗号分隔的字符 串。而与前两个方法唯一的不同之处在于，这一次为了取得每一项的值，调用的是每一项的 toLocaleString()方法，而不是 toString()方法。</p><pre><code class="js">var val = {  toString : function () {    return &#39;1&#39;  },  toLocalString : function () {    return &#39;-1&#39;  }}var val1 = {  toString : function () {     return &#39;2&#39;  },  toLocalString : function () {    return &#39;-2&#39;  }}var content = [val,val1]content.toString() // 1 ,2content.toLocalString() // -1 ,-2 调用每项的toLocalStringcontent // 1 ,2 默认调用toString 方法</code></pre><blockquote><p>数组继承的 toLocaleString()、toString()和 valueOf()方法，在默认情况下都会以逗号分隔的字 符串的形式返回数组项。而如果使用 join()方法，则可以使用不同的分隔符来构建这个字符串。join()方 法只接收一个参数，即用作分隔符的字符串，然后返回包含所有数组项的字符串。</p></blockquote><pre><code class="js">var colors = [&#39;red&#39;,&#39;blue&#39;,&#39;green&#39;]colors.join(&quot; | &quot;) // red | blue | green</code></pre><blockquote><p>如果数组中的某一项的值是 null 或者 undefined ， 那么该值在 join() 、 toLocaleString()、toString()和 valueOf()方法返回的结果中以空字符串表示。</p></blockquote><h2 id="5-2-3-栈方法"><a href="#5-2-3-栈方法" class="headerlink" title="5.2.3 栈方法"></a>5.2.3 栈方法</h2><p>ECMAScript 数组也提供了一种让数组的行为类似于其他数据结构的方法。具体说来，数组可以表 现得就像栈一样，后者是一种可以限制插入和删除项的数据结构。栈是一种 LIFO（Last-In-First-Out， 后进先出）的数据结构，也就是最新添加的项最早被移除。而栈中项的插入（叫做推入）和移除（叫做 弹出），只发生在一个位置——栈的顶部。ECMAScript 为数组专门提供了 push()和 pop()方法，以便 实现类似栈的行为。</p><p>push()方法可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。而 pop()方法则从数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项。</p><pre><code class="js">var colors = new Array();var count = colors.push(&quot;red&quot;, &quot;green&quot;);alert(count ) //2count = colors.push(&quot;black&quot;);alert(count) //3var item = colors.pop(); //取得最后一项alert(item) //blackalert(color.length) //2</code></pre><h2 id="5-2-4-队列方法"><a href="#5-2-4-队列方法" class="headerlink" title="5.2.4 队列方法"></a>5.2.4 队列方法</h2><p>由于 push()是向数组末端添加项的方法， 因此要模拟队列只需一个从数组前端取得项的方法。实现这一操作的数组方法就是 shift()，它能够移 除数组中的第一个项并返回该项，同时将数组长度减 1。结合使用 shift()和 push()方法，可以像使 用队列一样使用数组。</p><pre><code class="js">var color = new Array()var count = color.push(&#39;red&#39;,&#39;green&#39;)alert(count) // 2var item = color.shift()alert(item) // redcolor.length //1</code></pre><p>ECMAScript 还为数组提供了一个 unshift()方法。顾名思义，unshift()与 shift()的用途相反： 它能在数组前端添加任意个项并返回新数组的长度。因此，同时使用 unshift()和 pop()方法，可以 从相反的方向来模拟队列，即在数组的前端添加项，从数组末端移除项</p><h2 id="5-2-5-重新排序方法"><a href="#5-2-5-重新排序方法" class="headerlink" title="5.2.5 重新排序方法"></a>5.2.5 重新排序方法</h2><ul><li>reverse()</li><li>sort()</li></ul><ol><li>reverse 反转数组</li></ol><pre><code class="js">var number = [1,2,3,4,5]number.reverse()number // [5,4,3,2,1]</code></pre><ol start="2"><li>sort方法</li></ol><p>在默认情况下，sort()方法按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。 为了实现排序，sort()方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串，以 确定如何排序。即使数组中的每一项都是数值，sort()方法比较的也是字符串</p><pre><code class="js">var values = [0, 1, 5, 10, 15];values.sort();alert(values) // //0,1,10,15,5</code></pre><blockquote><p>比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等 则返回 0，如果第一个参数应该位于第二个之后则返回一个正数。</p></blockquote><pre><code class="js">function compare(val1,val2){  if(val1 &lt; val2){    return -1  }else if(val1 &gt; val2){      return 1           }else{    return 0  }}</code></pre><p>对于数值类型或者其 valueOf()方法会返回数值类型的对象类型，可以使用一个更简单的比较函 数。这个函数只要用第二个值减第一个值即可。</p><pre><code class="js">function compare(value1, value2){ return value2 - value1; }</code></pre><p>由于比较函数通过返回一个小于零、等于零或大于零的值来影响排序结果，因此减法操作就可以适 当地处理所有这些情况。</p><h2 id="5-2-6-操作方法"><a href="#5-2-6-操作方法" class="headerlink" title="5.2.6 操作方法"></a>5.2.6 操作方法</h2><p>ECMAScript 为操作已经包含在数组中的项提供了很多方法。其中，concat()方法可以基于当前数 组中的所有项创建一个新数组。具体来说，这个方法会先创建当前数组一个副本，然后将接收到的参数 添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是 复制当前数组并返回副本。如果传递给 concat()方法的是一或多个数组，则该方法会将这些数组中的 每一项都添加到结果数组中。如果传递的值不是数组，这些值就会被简单地添加到结果数组的末尾。</p><pre><code class="js">var colors = [&#39;red&#39; , &#39;green&#39; ,&#39;blue&#39;]var colors2 = colors.concat(&#39;1&#39;,[&#39;2&#39;,&#39;3&#39;])colors // [&#39;red&#39; , &#39;green&#39; ,&#39;blue&#39;]colors2 // [&#39;red&#39; , &#39;green&#39; ,&#39;blue&#39; , &#39;1&#39;,&#39;2&#39;,&#39;3&#39;]</code></pre><p>下一个方法是 slice()，它能够基于当前数组中的一或多个项创建一个新数组。slice()方法可以 接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()方法返回从该 参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项—但不包括结束位置的项。注意，slice()方法不会影响原始数组。</p><pre><code class="js">var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;];var colors2 = colors.slice(1);var colors3 = colors.slice(1,4);alert(colors2) // green到purplealert(colors3) // green 到yellow</code></pre><p>下面我们来介绍 splice()方法，这个方法恐怕要算是最强大的数组方法了，它有很多种用法。 splice()的主要用途是向数组的中部插入项，但使用这种方法的方式则有如下 3 种。</p><ul><li>删除：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。 例如，splice(0,2)会删除数组中的前两项。</li><li>插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、0（要删除的项数） 和要插入的项。 如果要插入多个项， 可以再传入第四、第五， 以至任意多个项。 例如， splice(2,0,”red”,”green”)会从当前数组的位置 2 开始插入字符串”red”和”green”。</li><li>替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起 始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如， splice (2,1,”red”,”green”)会删除当前数组位置 2 的项，然后再从位置 2 开始插入字符串 “red”和”green”。</li></ul><blockquote><p>splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项（如果没有删除任何 项，则返回一个空数组）。</p></blockquote><h2 id="5-2-7-位置方法"><a href="#5-2-7-位置方法" class="headerlink" title="5.2.7 位置方法"></a>5.2.7 位置方法</h2><p>ECMAScript 5 为数组实例添加了两个位置方法：indexOf()和 lastIndexOf()。这两个方法都接收 两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中，indexOf()方法从数组的开头（位 置 0）开始向后查找，lastIndexOf()方法则从数组的末尾开始向前查找。</p><p>这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回1。在比较第一个参数 与数组中的每一项时，会使用全等操作符；也就是说，要求查找的项必须严格相等（就像使用===一样）。</p><h2 id="5-2-8-迭代方法"><a href="#5-2-8-迭代方法" class="headerlink" title="5.2.8 迭代方法"></a>5.2.8 迭代方法</h2><p>ECMAScript 5 为数组定义了 5 个迭代方法。每个方法都接收两个参数：要在每一项上运行的函数和（可选的）运行该函数的作用域对象——影响 this 的值。传入这些方法中的函数会接收三个参数：数 组项的值、该项在数组中的位置和数组对象本身。根据使用的方法不同，这个函数执行后的返回值可能 会也可能不会影响方法的返回值。</p><ul><li><p>every()  用于查询数组中的项是否满足某个条件，如果全部为true则返回true，否则返回false</p></li><li><p>some() 用于查询数组中的项是否满足某个条件，如果一个为true则返回true</p><pre><code class="js">var numbers = [1,2,3,4,5,4,3,2,1];var everyResult = numbers.every(function(item, index, array){return (item &gt; 2); }); // false 因为有小于2的值var someResult = numbers.some(function(item,index,array){  return (item &gt; 2)})//true 因为有大于2的值</code></pre></li><li><p>filter()函数，它利用指定的函数确定是否在返回的数组中包含某一项。返回过滤的数组（过滤器）</p><pre><code class="js">var numbers = [1,2,3,4,5,4,3,2,1];var filterResult = numbers.filter(function(item,index,array){  return item &gt; 2})filterResult // [3,4,5,4,3]</code></pre></li><li><p>map()也返回一个数组，而这个数组的每一项都是在原始数组中的对应项上运行传入函数的结果。(遍历并返回数组)</p><pre><code class="js">var numbers = [1,2,3,4,5,4,3,2,1];var mapResult = numbers.map(function(item,index,array){  return item * 2})mapResult // [2,3,6,8,10,8,6,4,2]</code></pre></li><li><p>forEach()，它只是对数组中的每一项运行传入的函数。</p><pre><code class="js">//简单复制数组var numbers = [1,2,3,4,5,4,3,2,1]var newGroup = []numbers.forEach(function(item,index,array){  newGroup.push(item)})newGroup //[1,2,3,4,5,4,3,2,1]</code></pre></li></ul><h2 id="5-2-9-归并方法"><a href="#5-2-9-归并方法" class="headerlink" title="5.2.9 归并方法"></a>5.2.9 归并方法</h2><p>ECMAScript 5 还新增了两个归并数组的方法：reduce()和 reduceRight()。这两个方法都会迭 代数组的所有项，然后构建一个最终返回的值。其中，reduce()方法从数组的第一项开始，逐个遍历 到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。</p><blockquote><p>reduce()和 reduceRight()的函数接收 4 个参数：前一个值、当前值、项的索引和数组对象。</p></blockquote><p> 这 个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第 一个参数是数组的第一项，第二个参数就是数组的第二项。</p><pre><code class="js">var numbers = [1,2,3,4,5]var sum = numbers.reduce(function(pre,cur,index,array){  return pre + cur})sum //15</code></pre><p>第一次执行回调函数，prev 是 1，cur 是 2。第二次，prev 是 3（1 加 2 的结果），cur 是 3（数组 的第三项）。这个过程会持续到把数组中的每一项都访问一遍，最后返回结果。</p><p>reduceRight()的作用类似，只不过方向相反而已。</p><pre><code class="js">var values = [1,2,3,4,5]; var sum = values.reduceRight(function(prev, cur, index, array){ return prev + cur; }); alert(sum); //15</code></pre><h1 id="5-3-Date类型"><a href="#5-3-Date类型" class="headerlink" title="5.3 Date类型"></a>5.3 Date类型</h1><p>ECMAScript 中的 Date 类型是在早期 Java 中的 java.util.Date 类基础上构建的。为此，Date 类型使用自 UTC（Coordinated Universal Time，国际协调时间）1970 年 1 月 1 日午夜（零时）开始经过 的毫秒数来保存日期。</p><p>在使用这种数据存储格式的条件下，Date 类型保存的日期能够精确到 1970 年 1 月 1 日之前或之后的 285 616 年。</p><p>创建日期对象 <code>var time = new Date()</code></p><p>在调用 Date 构造函数而不传递参数的情况下，新创建的对象自动获得当前日期和时间。如果想根 据特定的日期和时间创建日期对象，必须传入表示该日期的毫秒数（即从 UTC 时间 1970 年 1 月 1 日午 夜起至该日期止经过的毫秒数）。为了简化这一计算过程，ECMAScript 提供了两个方法：Date.parse() 和 Date.UTC()。</p><ul><li><p>Date.parse() 接受一个日期字符串，反馈一个相应日期的毫秒数</p><pre><code class="js">var ms = Date.parse(&#39;1993-09-28&#39;)var birthDay = new Date(ms)birthDay //Tue Sep 28 1993 08:00:00 GMT+0800 (中国标准时间)//与下面类似var birthDay = new Date(&#39;1993-09-28&#39;)</code></pre><blockquote><p>ECMA-262 没有定义 Date.parse()应该支持哪种日期格式，因此这个方法的行为因实现 而异，而且通常是因地区而异。</p></blockquote></li><li><p>Date.UTC()方法同样也返回表示日期的毫秒数，但它与 Date.parse()在构建值时使用不同的信息。</p><blockquote><p>Date.UTC()的参数分别是年份、基于 0 的月份（一月是 0，二月是 1，以此类推）、月 （1 到 31）、小时数（0 到 23）、分钟、秒以及毫秒数。</p><p>在这些参数中，只有前两个参数（年和月）是必 需的。如果没有提供月中的天数，则假设天数为 1；如果省略其他参数，则统统假设为 0。</p></blockquote><pre><code class="js">// GMT 时间 2000 年 1 月 1 日午夜零时var y2k = new Date(Date.UTC(2000, 0));//类似于var y2k = new Date(2000, 0);// GMT 时间 2005 年 5 月 5 日下午 5:55:55var allFives = new Date(Date.UTC(2005, 4, 5, 17, 55, 55));//类似于var allFives = new Date(2005, 4, 5, 17, 55, 55);</code></pre></li><li><p>ECMAScript 5 添加了 Data.now()方法，返回表示调用这个方法时的日期和时间的毫秒数。这个方 法简化了使用 Data 对象分析代码的工作。</p><pre><code class="js">var start = Date.now()dosomething()var stop = Date.now()//可以用以下替换var start = +new Date() //+号替换成字符串 调用new Date().valueOf()dosomething()var stop = +new Date()</code></pre></li></ul><h2 id="5-3-2-📅日期格式化"><a href="#5-3-2-📅日期格式化" class="headerlink" title="5.3.2 📅日期格式化"></a>5.3.2 📅日期格式化</h2><ul><li>toDateString()——以特定于实现的格式显示星期几、月、日和年；</li><li>toTimeString()——以特定于实现的格式显示时、分、秒和时区；</li><li>toLocaleDateString()——以特定于地区的格式显示星期几、月、日和年；</li><li>toLocaleTimeString()——以特定于实现的格式显示时、分、秒；</li><li>toUTCString()——以特定于实现的格式完整的 UTC 日期。</li></ul><blockquote><p>ECMAScript 推荐现在编写的代码一律使用 toUTCString()方法。</p></blockquote><h1 id="5-4-RegExp-类型"><a href="#5-4-RegExp-类型" class="headerlink" title="5.4 RegExp 类型"></a>5.4 RegExp 类型</h1><p>ECMAScript 通过 RegExp 类型来支持正则表达式。使用下面类似 Perl 的语法，就可以创建一个正 则表达式。</p><p><code>var expression = / pattern / flags ;</code></p><p>其中的模式（pattern）部分可以是任何简单或复杂的正则表达式，可以包含字符类、限定符、分组、 向前查找以及反向引用。每个正则表达式都可带有一或多个标志（flags），用以标明正则表达式的行为。 正则表达式的匹配模式支持下列 3 个标志。</p><ol><li>g：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即 停止；</li><li>i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；</li><li>m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模 式匹配的项。</li></ol><p>一个正则表达式就是一个模式与上述 3 个标志的组合体。不同组合产生不同结果。</p><pre><code class="js">/* * 匹配字符串中所有&quot;at&quot;的实例 */var pattern1 = /at/g;/* * 匹配第一个&quot;bat&quot;或&quot;cat&quot;，不区分大小写 */var pattern2 = /[bc]at/i;/* * 匹配所有以&quot;at&quot;结尾的 3 个字符的组合，不区分大小写 */var pattern3 = /.at/gi;</code></pre><p>前面举的这些例子都是以字面量形式来定义的正则表达式。另一种创建正则表达式的方式是使用 RegExp 构造函数，它接收两个参数：一个是要匹配的字符串模式，另一个是可选的标志字符串。可以 使用字面量定义的任何表达式，都可以使用构造函数来定义，</p><pre><code class="js">/* * 匹配第一个&quot;bat&quot;或&quot;cat&quot;，不区分大小写 */var pattern1 = /[bc]at/i;//使用构造函数创建正则表达式var pattern1 = new RegExp(&quot;[bc]at&quot;,&quot;i&quot;)</code></pre><h2 id="5-4-1-RegExp实例属性"><a href="#5-4-1-RegExp实例属性" class="headerlink" title="5.4.1 RegExp实例属性"></a>5.4.1 RegExp实例属性</h2><p>RegExp 的每个实例都具有下列属性，通过这些属性可以取得有关模式的各种信息</p><ul><li>global：布尔值，表示是否设置了 g 标志</li><li>ignoreCase：布尔值，表示是否设置了 i 标志。</li><li>lastIndex：整数，表示开始搜索下一个匹配项的字符位置，从 0 算起。</li><li>multiline：布尔值，表示是否设置了 m 标志</li><li>source：正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。</li></ul><h1 id="5-5-Function-类型"><a href="#5-5-Function-类型" class="headerlink" title="5.5 Function 类型"></a>5.5 Function 类型</h1><p>说起来 ECMAScript 中什么最有意思，我想那莫过于函数了——而有意思的根源，则在于函数实际 上是对象。每个函数都是 Function 类型的实例，而且都与其他引用类型一样具有属性和方法。由于函 数是对象，因此函数名实际上也是一个指向函数对象的指针，不会与某个函数绑定。函数通常是使用函 数声明语法定义的</p><p>函数的三种创建方式：</p><pre><code class="js">//函数声明function sum(num1,num2){  return num1 + num2}//函数表达式var sum = function(num1,num2){  return num1 + num2}//Function 构造函数生成var sum = new Function(&#39;num1&#39;,&#39;num2&#39;,&#39;return num1 + num2&#39;)</code></pre><pre><code class="js">function sum(num1, num2){ return num1 + num2; }alert(sum(10,10));//20var anotherSum = sum;alert(anotherSum(10,10)); //20sum = null; alert(anotherSum(10,10)); //20</code></pre><blockquote><p>以上代码首先定义了一个名为 sum()的函数，用于求两个值的和。然后，又声明了变量 anotherSum， 并将其设置为与 sum 相等（将 sum 的值赋给 anotherSum）。注意，使用不带圆括号的函数名是访问函 数指针，而非调用函数。此时，anotherSum 和 sum 就都指向了同一个函数，因此 anotherSum()也 可以被调用并返回结果。即使将 sum 设置为 null，让它与函数“断绝关系”，但仍然可以正常调用 anotherSum()。</p></blockquote><h2 id="5-5-1-没有重载（深入理解）"><a href="#5-5-1-没有重载（深入理解）" class="headerlink" title="5.5.1 没有重载（深入理解）"></a>5.5.1 没有重载（深入理解）</h2><p>将函数名想象为指针，也有助于理解为什么 ECMAScript 中没有函数重载的概念。（重复声明的函数会被覆盖）</p><pre><code class="js">function addSomeNum(num){  return num + 100}function addSomeNum(num){  return num + 200}addSomeNum(100) //300</code></pre><p>函数被覆盖。函数表达式也是如此。</p><h2 id="5-5-2-函数声明与函数表达式"><a href="#5-5-2-函数声明与函数表达式" class="headerlink" title="5.5.2 函数声明与函数表达式"></a>5.5.2 函数声明与函数表达式</h2><p>本节到目前为止，我们一直没有对函数声明和函数表达式加以区别。而实际上，解析器在向执行环 境中加载数据时，对函数声明和函数表达式并非一视同仁。解析器会率先读取函数声明，并使其在执行 任何代码之前可用（可以访问）；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真 正被解释执行。</p><pre><code class="js">alert(sum(10,10));function sum(num1, num2){ return num1 + num2; }</code></pre><blockquote><p>上述代码可以运行。因为在代码开始执行之前，解析器就已经通过一个名为函数声明提升 （function declaration hoisting）的过程，读取并将函数声明添加到执行环境中。对代码求值时，JavaScript 引擎在第一遍会声明函数并将它们放到源代码树的顶部。所以，即使声明函数的代码在调用它的代码后 面，JavaScript 引擎也能把函数声明提升到顶部。</p></blockquote><p>如果改变为函数表达式则会出现错误</p><pre><code class="js">alert(sum(10,10))var sum = function(num1,num2){  return num1 + num2}</code></pre><p>原因在于函数位于一个初始化语句中，而不是一个函数声 明。换句话说，在执行到函数所在的语句之前，变量 sum 中不会保存有对函数的引用；而且，由于第一 行代码就会导致“unexpected identifier”（意外标识符）错误，实际上也不会执行到下一行。</p><h2 id="5-5-3-作为值的函数"><a href="#5-5-3-作为值的函数" class="headerlink" title="5.5.3 作为值的函数"></a>5.5.3 作为值的函数</h2><p>因为 ECMAScript 中的函数名本身就是变量，所以函数也可以作为值来使用。也就是说，不仅可以 像传递参数一样把一个函数传递给另一个函数，而且可以将一个函数作为另一个函数的结果返回。</p><pre><code class="js">function execFunction(fn,params){  return fn(params)}function addSomeNum(num){  return num + 10}execFunction(addSomeNum,10) //20</code></pre><p>当然，可以从一个函数中返回另一个函数，而且这也是极为有用的一种技术。例如，假设有一个 对象数组，我们想要根据某个对象属性对数组进行排序。而传递给数组 sort()方法的比较函数要接收 两个参数，即要比较的值。可是，我们需要一种方式来指明按照哪个属性来排序。要解决这个问题， 可以定义一个函数，它接收一个属性名，然后根据这个属性名来创建一个比较函数，下面就是这个函 数的定义。</p><pre><code class="js">function compare(objectName){  return function(obj1,obj2){    var val1 = obj1[objectName]    var val2 = obj2[objectName]    if(val1 &gt; val2){           return -1       }else if(val1 &lt; val2){        return 1       }else{         return 0       }  }}//实例var data = [{name: &quot;Zachary&quot;, age: 28}, {name: &quot;Nicholas&quot;, age: 29}];data.sort(compare(&quot;name&quot;)); alert(data[0].name); //Nicholasdata.sort(compare(&quot;age&quot;)); alert(data[0].name); //Zachary</code></pre><h2 id="5-5-4-函数内部属性"><a href="#5-5-4-函数内部属性" class="headerlink" title="5.5.4 函数内部属性"></a>5.5.4 函数内部属性</h2><p>在函数内部，有两个特殊的对象：arguments 和 this。其中，arguments 在第 3 章曾经介绍过， 它是一个类数组对象，包含着传入函数中的所有参数。虽然 arguments 的主要用途是保存函数参数， 但这个对象还有一个名叫 callee 的属性，该属性是一个指针，指向拥有这个 arguments 对象的函数。</p><pre><code class="js">function factorial(num){ if (num &lt;=1) { return 1; } else { return num * factorial(num-1) } }</code></pre><p>定义阶乘函数一般都要用到递归算法；如上面的代码所示，在函数有名字，而且名字以后也不会变 的情况下，这样定义没有问题。但问题是这个函数的执行与函数名 factorial 紧紧耦合在了一起。为 了消除这种紧密耦合的现象，可以像下面这样使用 arguments.callee。</p><pre><code class="js">function factorial(num){ if (num &lt;=1) { return 1; } else { return num * arguments.callee(num-1) } }</code></pre><blockquote><p>在这个重写后的 factorial()函数的函数体内，没有再引用函数名 factorial。这样，无论引用 函数时使用的是什么名字，都可以保证正常完成递归调用。</p></blockquote><pre><code class="js">var trueFactorial = factorial;factorial = function(){ return 0; };alert(trueFactorial(5)); //120alert(factorial(5));//0</code></pre><p>函数内部的另一个特殊对象是 this，其行为与 Java 和 C#中的 this 大致类似。换句话说，this 引用的是函数据以执行的环境对象——或者也可以说是 this 值（当在网页的全局作用域中调用函数时， this 对象引用的就是 window）。</p><pre><code class="js">window.color = &#39;red&#39;var o = {  color : &quot;blue&quot;}function sayColor(){  return this.color}sayColor() // redo.sayColor = sayColor o.sayColor() // blue</code></pre><p>上面这个函数 sayColor()是在全局作用域中定义的，它引用了 this 对象。由于在调用函数之前， this 的值并不确定，因此 this 可能会在代码执行过程中引用不同的对象。当在全局作用域中调用 sayColor() 时， this 引用的是全局对象 window ；换句话说， 对 this.color 求值会转换成对 window.color 求值，于是结果就返回了”red”。而当把这个函数赋给对象 o 并调用 o.sayColor() 时，this 引用的是对象 o，因此对 this.color 求值会转换成对 o.color 求值，结果就返回了”blue”。</p><p>caller属性。这个属性保存着当前函数的引用对象（是谁来调用这个函数）</p><pre><code class="js">function myFunc(){  if(arguments.callee.caller == &#39;null&#39;){    console.log(&quot;调用我的人是全局环境&quot;)  }else{    console.log(&quot;调用我的人是&quot; + arguments.callee.caller)  }}myFunc() // 调用我的人是全局环境function test(){    return myFunc()}test() // 调用我的人是test 打印test函数</code></pre><h2 id="5-5-5-函数属性和方法"><a href="#5-5-5-函数属性和方法" class="headerlink" title="5.5.5 函数属性和方法"></a>5.5.5 函数属性和方法</h2><p>ECMAScript 中的函数是对象，因此函数也有属性和方法。每个函数都包含两个 属性：length 和 prototype。其中，length 属性表示函数希望接收的命名参数的个数</p><pre><code class="js">function sayName(name){ alert(name); }function sum(num1, num2){ return num1 + num2; }function sayHi(){ alert(&quot;hi&quot;); }alert(sayName.length);  //1alert(sum.length);  //2alert(sayHi.length); //0</code></pre><p>在 ECMAScript 核心所定义的全部属性中， 最耐人寻味的就要数 prototype 属性了。 对于 ECMAScript 中的引用类型而言，prototype 是保存它们所有实例方法的真正所在。换句话说，诸如 toString()和 valueOf()等方法实际上都保存在 prototype 名下，只不过是通过各自对象的实例访 问罢了。在创建自定义引用类型以及实现继承时，prototype 属性的作用是极为重要的（第 6 章将详 细介绍）。在 ECMAScript 5 中，prototype 属性是不可枚举的，因此使用 for-in 无法发现。</p><p>每个函数都包含两个非继承而来的方法：apply()和 call()。这两个方法的用途都是在特定的作 用域中调用函数，实际上等于设置函数体内 this 对象的值。首先，apply()方法接收两个参数：一个 是在其中运行函数的作用域，另一个是参数数组。其中，第二个参数可以是 Array 的实例，也可以是 arguments 对象。</p><pre><code class="js">function sum(num1,num2){  return num1 + num2}function sumCall(num1,num2){  return sum.call(this,[num1,num2])}function sumCall2(num1,num2){  return sum.call(this,arguments)}sumCall(10,10) //20sumCall2(10,10) //20</code></pre><p>call()方法与 apply()方法的作用相同，它们的区别仅在于接收参数的方式不同。对于 call() 方法而言，第一个参数是 this 值没有变化，变化的是其余参数都直接传递给函数。换句话说，在使用 call()方法时，传递给函数的参数必须逐个列举出来</p><p>事实上，传递参数并非 apply()和 call()真正的用武之地；它们真正强大的地方是能够扩充函数 赖以运行的作用域。</p><pre><code class="js">window.color = &#39;red&#39;var o = {  color: &#39;blue&#39;}function sayColor(){  return this.color}sayColor() // redsayColor.call(window) //redsayColor.call(o) //blue</code></pre><p>而 sayColor.call(this)和 sayColor.call(window)，则是两 种显式地在全局作用域中调用函数的方式，结果当然都会显示”red”。但是，当运行 sayColor.call(o) 时，函数的执行环境就不一样了，因为此时函数体内的 this 对象指向了 o，于是结果显示的是”blue”。</p><p>使用 call()（或 apply()）来扩充作用域的最大好处，就是对象不需要与方法有任何耦合关系。 在前面例子的第一个版本中，我们是先将 sayColor()函数放到了对象 o 中，然后再通过 o 来调用它的； 而在这里重写的例子中，就不需要先前那个多余的步骤了。</p><pre><code class="js">//bindwindow.color = &#39;red&#39;var o = {  color: &#39;blue&#39;}function sayColor(){  return this.color}var objectBind = sayColor.bind(o)objectBind() // blue</code></pre><h2 id="5-6-基本包装类型"><a href="#5-6-基本包装类型" class="headerlink" title="5.6 基本包装类型"></a>5.6 基本包装类型</h2><p>为了便于操作基本类型值， ECMAScript 还提供了 3 个特殊的引用类型：Boolean、Number 和 String。这些类型与本章介绍的其他引用类型相似，但同时也具有与各自的基本类型相应的特殊行为。 实际上，每当读取一个基本类型值的时候，后台就会创建一个对应的基本包装类型的对象，从而让我们 能够调用一些方法来操作这些数据。</p><pre><code class="js">var s1 = &quot;some text&quot;;var s2 = s1.substring(2);</code></pre><p>这个例子中的变量 s1 包含一个字符串， 字符串当然是基本类型值。 而下一行调用了 s1 的 substring()方法，并将返回的结果保存在了 s2 中。我们知道，基本类型值不是对象，因而从逻辑上 讲它们不应该有方法（尽管如我们所愿，它们确实有方法）。其实，为了让我们实现这种直观的操作， 后台已经自动完成了一系列的处理。当第二行代码访问 s1 时，访问过程处于一种读取模式，也就是要 从内存中读取这个字符串的值。而在读取模式中访问字符串时，后台都会自动完成下列处理。</p><ol><li>创建 String 类型的一个实例；</li><li>在实例上调用指定的方法；</li><li>销毁这个实例。</li></ol><p>引用类型与基本包装类型的主要区别就是对象的生存期。使用 new 操作符创建的引用类型的实例， 在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一 行代码的执行瞬间，然后立即被销毁。这意味着我们不能在运行时为基本类型值添加属性和方法。</p><h2 id="5-6-1-Boolean类型"><a href="#5-6-1-Boolean类型" class="headerlink" title="5.6.1 Boolean类型"></a>5.6.1 Boolean类型</h2><p>Boolean 类型是与布尔值对应的引用类型。要创建 Boolean 对象，可以像下面这样调用 Boolean 构造函数并传入 true 或 false 值。</p><p><code>var booleanObject = new Boolean(true);</code></p><p>Boolean 类型的实例重写了 valueOf()方法，返回基本类型值 true 或 false；重写了 toString() 方法，返回字符串”true”和”false”。可是，Boolean 对象在 ECMAScript 中的用处不大，因为它经 常会造成人们的误解。其中最常见的问题就是在布尔表达式中使用 Boolean 对象</p><pre><code class="js">var falseObj = new Boolean(false)var result = falseObj &amp;&amp; true result // true 此时falseObj没有进行求值  仅仅是把falseObj当成一个 obj对象var falseValue = false;result = falseValue &amp;&amp; true;alert(result); //false</code></pre><blockquote><p>基本类型与引用类型的布尔值还有两个区别。首先，typeof 操作符对基本类型返回”boolean”， 而对引用类型返回”object”。其次，由于 Boolean 对象是 Boolean 类型的实例，所以使用 instanceof 操作符测试 Boolean 对象会返回 true，而测试基本类型的布尔值则返回 false。</p></blockquote><h2 id="5-6-2-Number类型"><a href="#5-6-2-Number类型" class="headerlink" title="5.6.2 Number类型"></a>5.6.2 Number类型</h2><p>Number 是与数字值对应的引用类型。要创建 Number 对象，可以在调用 Number 构造函数时向其 中传递相应的数值。</p><p><code>var num = new Number(10)</code></p><p>与 Boolean 类型一样，Number 类型也重写了 valueOf()、toLocaleString()和 toString() 方法。重写后的 valueOf()方法返回对象表示的基本类型的数值，另外两个方法则返回字符串形式的数值。我们在第 3 章还介绍过，可以为 toString()方法传递一个表示基数的参数，告诉它返回几进制 数值的字符串形式，如下面的例子所示。</p><pre><code class="js">var num = 10alert(num.toString()); // 10alert(num.toString(2)); // 1010alert(num.toString(8)); //12alert(num.toString(10)); //10alert(num.toString(16)); //a</code></pre><p>除了继承的方法之外，Number 类型还提供了一些用于将数值格式化为字符串的方法。</p><p> 其中，toFixed()方法会按照指定的小数位返回数值的字符串表示</p><pre><code class="js">var num = new Number(10)num.toFixed(2) // 10.00var a = 10.005a.toFixed(2) // 10.01</code></pre><h2 id="5-6-3-String-类型"><a href="#5-6-3-String-类型" class="headerlink" title="5.6.3 String 类型"></a>5.6.3 String 类型</h2><p>String 类型是字符串的对象包装类型，可以像下面这样使用 String 构造函数来创建。</p><p><code>var str = new String(&#39;hello world&#39;)</code></p><p>String 对象的方法也可以在所有基本的字符串值中访问到。其中，继承的 valueOf()、toLocaleString()和 toString()方法，都返回对象所表示的基本字符串值。</p><p>String 类型的每个实例都有一个 length 属性，表示字符串中包含多个字符。</p><pre><code class="js">var str = &#39;hello world&#39;str.length  // 11</code></pre><p>String 类型提供了很多方法，用于辅助完成对 ECMAScript 中字符串的解析和操作。</p><ol><li>字符方法</li></ol><p>两个用于访问字符串中特定字符的方法是：charAt()和 charCodeAt()。这两个方法都接收一个 参数，即基于 0 的字符位置。其中，charAt()方法以单字符字符串的形式返回给定位置的那个字符 （ECMAScript 中没有字符类型）。</p><pre><code class="js">var str = &#39;hello world&#39;str.charAt(1) // estr.charCodeAt(1) // 101 输出的是&quot;101&quot;，也就是小写字母&quot;e&quot;的字符编码</code></pre><p>ECMAScript 5 还定义了另一个访问个别字符的方法。在支持此方法的浏览器中，可以使用方括号加数 字索引来访问字符串中的特定字符</p><pre><code class="js">var str = &#39;hello world&#39;str[1] // e</code></pre><ol start="2"><li>字符串操作方法</li></ol><p><code>concat()</code>  拼接字符串,返回一个新字符串</p><pre><code class="js">var str = &#39;hello &#39;var result = str.concat(&#39;world&#39;)result // hello worldstr // hello</code></pre><blockquote><p>concat()方法可以接受任意多个参数，也就是说可以通过它 拼接任意多个字符串。</p></blockquote><pre><code class="js">var str = &#39;hello &#39;var result = str.concat(&#39;world&#39;,&#39;~&#39;)result // hello world~</code></pre><p>ECMAScript 还提供了三个基于子字符串创建新字符串的方法：slice()、substr()和 substring()。 这三个方法都会返回被操作字符串的一个子字符串，而且也都接受一或两个参数。</p><pre><code class="js">var str = &#39;hello world&#39;str.slice(3) // lo worldstr.substr(3) // lo worldstr.substring(3)// lo worldstr.slice(3,7) // lo wstr.substr(3,7) //lo worlstr.substring(3,7) //lo w</code></pre><p>在传递给这些方法的参数是负值的情况下，它们的行为就不尽相同了。其中，slice()方法会将传 入的负值与字符串的长度相加，substr()方法将负的第一个参数加上字符串的长度，而将负的第二个 参数转换为 0。最后，substring()方法会把所有负值参数都转换为 0。</p><ol start="3"><li>字符串位置方法</li></ol><p>有两个可以从字符串中查找子字符串的方法：indexOf()和 lastIndexOf()。这两个方法都是从 一个字符串中搜索给定的子字符串，然后返子字符串的位置（如果没有找到该子字符串，则返回-1）。 这两个方法的区别在于：indexOf()方法从字符串的开头向后搜索子字符串，而 lastIndexOf()方法 是从字符串的末尾向前搜索子字符串。</p><pre><code class="js">var stringValue = &quot;hello world&quot;;alert(stringValue.indexOf(&quot;o&quot;));  //4alert(stringValue.lastIndexOf(&quot;o&quot;)); // 7</code></pre><p>这两个方法都可以接收可选的第二个参数， 表示从字符串中的哪个位置开始搜索。 换句话说， indexOf()会从该参数指定的位置向后搜索，忽略该位置之前的所有字符；而 lastIndexOf()则会从 指定的位置向前搜索，忽略该位置之后的所有字符。</p><pre><code class="js">var stringValue = &quot;hello world&quot;;alert(stringValue.indexOf(&quot;o&quot;, 6)); //7alert(stringValue.lastIndexOf(&quot;o&quot;, 6)); //4</code></pre><ol start="4"><li>trim()方法</li></ol><p>ECMAScript 5 为所有字符串定义了 trim()方法。这个方法会创建一个字符串的副本，删除前置及 后缀的所有空格，然后返回结果。</p><pre><code class="js">var str = &#39;  hello world  &#39;var newStr = str.trim() newStr // hello wold 去除了两端空格str //  hello world  原字符串</code></pre><ol start="5"><li>字符串大小写转换方法</li></ol><p>toLowerCase()  全部转换为小写</p><p>toUpperCase() 全部转换为大写</p><p>返回一个新的字符串</p><pre><code class="js">var str = &#39;hello world&#39;var newStr = str.toUpperCase() //HELLO WORLD</code></pre><ol start="6"><li>字符串的模式匹配方法</li></ol><p>String 类型定义了几个用于在字符串中匹配模式的方法。第一个方法就是 match()，在字符串上 调用这个方法，本质上与调用 RegExp 的exec()方法相同。match()方法只接受一个参数，要么是一 个正则表达式，要么是一个 RegExp 对象。</p><pre><code class="js">var text = &quot;cat, bat, sat, fat&quot;;var pattern = /.at/;var matches = text.match(pattern);alert(matches.index); // 0alert(matches[0]); //catalert(pattern.lastIndex); //0</code></pre><p>另一个用于查找模式的方法是 search()。这个方法的唯一参数与 match()方法的参数相同：由字 符串或 RegExp 对象指定的一个正则表达式。search()方法返回字符串中第一个匹配项的索引；如果没 有找到匹配项，则返回-1。而且，search()方法始终是从字符串开头向后查找模式。</p><pre><code class="js">var text = &quot;cat, bat, sat, fat&quot;;var pos = text.search(/at/)pos // 1</code></pre><p>这个例子中的 search()方法返回 1，即”at”在字符串中第一次出现的位置。</p><p>为了简化替换子字符串的操作，ECMAScript 提供了 replace()方法。这个方法接受两个参数：第 一个参数可以是一个 RegExp 对象或者一个字符串（这个字符串不会被转换成正则表达式），第二个参 数可以是一个字符串或者一个函数。如果第一个参数是字符串，那么只会替换第一个子字符串。要想替 换所有子字符串，唯一的办法就是提供一个正则表达式，而且要指定全局（g）标志</p><pre><code class="js">var text = &quot;cat, bat, sat, fat&quot;;text.replace(/at/g,&#39;on&#39;)text // con,bon,son,fon</code></pre><p>最后一个与模式匹配有关的方法是 split()，这个方法可以基于指定的分隔符将一个字符串分割成 多个子字符串，并将结果放在一个数组中。分隔符可以是字符串，也可以是一个 RegExp 对象（这个方 法不会将字符串看成正则表达式）。split()方法可以接受可选的第二个参数，用于指定数组的大小， 以便确保返回的数组不会超过既定大小。</p><pre><code class="js">var colorText = &quot;red,blue,green,yellow&quot;;var colors1 = colorText.split(&quot;,&quot;); //[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;]var colors2 = colorText.split(&quot;,&quot;, 2); //[&quot;red&quot;, &quot;blue&quot;] </code></pre><p>localeCompare()方法  fromCharCode()方法  有需要再看</p><h1 id="5-7-单体内置对象"><a href="#5-7-单体内置对象" class="headerlink" title="5.7 单体内置对象"></a>5.7 单体内置对象</h1><p>单体内置对象：Global 和 Math。</p><h2 id="5-7-1-Global对象"><a href="#5-7-1-Global对象" class="headerlink" title="5.7.1 Global对象"></a>5.7.1 Global对象</h2><p>Global（全局）对象可以说是 ECMAScript 中最特别的一个对象了，因为不管你从什么角度上看， 这个对象都是不存在的。ECMAScript 中的 Global 对象在某种意义上是作为一个终极的“兜底儿对象” 来定义的。换句话说，不属于任何其他对象的属性和方法，最终都是它的属性和方法。事实上，没有全 局变量或全局函数；所有在全局作用域中定义的属性和函数，都是 Global 对象的属性。本书前面介绍 过的那些函数，诸如 isNaN()、isFinite()、parseInt()以及 parseFloat()，实际上全都是 Global 对象的方法。除此之外，Global 对象还包含其他一些方法。</p><ol><li>URI 编码方法</li></ol><p>Global 对象的 encodeURI() 和 encodeURIComponent() 方法可以对 URI（Uniform Resource Identifiers，通用资源标识符）进行编码，以便发送给浏览器。有效的 URI 中不能包含某些字符，例如 空格。而这两个 URI 编码方法就可以对 URI 进行编码，它们用特殊的 UTF-8 编码替换所有无效的字符， 从而让浏览器能够接受和理解。</p><p>其中，encodeURI()主要用于整个 URI（例如，<a href="http://www.wrox.com/illegal">http://www.wrox.com/illegal</a> value.htm），而 encodeURIComponent()主要用于对 URI 中的某一段（例如前面 URI 中的 illegal value.htm）进行编码。 它们的主要区别在于，encodeURI()不会对本身属于 URI 的特殊字符进行编码，例如冒号、正斜杠、 问号和井字号；而 encodeURIComponent()则会对它发现的任何非标准字符进行编码。</p><pre><code class="js">var uri = &quot;http://www.wrox.com/illegal value.htm#start&quot;;alert(encodeURI(uri)); //&quot;http://www.wrox.com/illegal%20value.htm#start&quot;alert(encodeURIComponent(uri)); // //&quot;http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start&quot;</code></pre><p>使用 encodeURI() 编码后的结果是除了空格之外的其他字符都原封不动， 只有空格被替换成了 %20。而 encodeURIComponent()方法则会使用对应的编码替换所有非字母数字字符。这也正是可以 对整个 URI 使用 encodeURI()，而只能对附加在现有 URI 后面的字符串使用 encodeURIComponent() 的原因所在。</p><p>与 encodeURI() 和 encodeURIComponent() 方法对应的两个方法分别是 decodeURI() 和 decodeURIComponent()。其中，decodeURI()只能对使用 encodeURI()替换的字符进行解码。例如， 它可将%20 替换成一个空格，但不会对%23 作任何处理，因为%23 表示井字号（#），而井字号不是使用 encodeURI()替换的。同样地，decodeURIComponent()能够解码使用 encodeURIComponent()编码的所有字符，即它可以解码任何特殊字符的编码。</p><ol start="2"><li>eval()方法</li></ol><p>现在，我们介绍最后一个——大概也是整个 ECMAScript 语言中最强大的一个方法：eval()。eval() 方法就像是一个完整的 ECMAScript 解析器，它只接受一个参数，即要执行的 ECMAScript（或 JavaScript） 字符串。</p><p><code>eval(&#39;alert(&#39;hi&#39;)&#39;)</code>等同于<code>alert(&#39;hi&#39;)</code></p><p>当解析器发现代码中调用 eval()方法时，它会将传入的参数当作实际的 ECMAScript 语句来解析， 然后把执行结果插入到原位置。通过 eval()执行的代码被认为是包含该次调用的执行环境的一部分， 因此被执行的代码具有与该执行环境相同的作用域链。这意味着通过 eval()执行的代码可以引用在包 含环境中定义的变量</p><pre><code class="js">var msg = &quot;hello world&quot;;eval(&#39;alert(msg)&#39;)  //hello world</code></pre><p>可见，变量 msg 是在 eval()调用的环境之外定义的，但其中调用的 alert()仍然能够显示”hello world”。这是因为上面第二行代码最终被替换成了一行真正的代码。同样地，我们也可以在 eval() 调用中定义一个函数，然后再在该调用的外部代码中引用这个函数：</p><pre><code class="js">eval(&quot;function sayHi() { alert(&#39;hi&#39;); }&quot;);sayHi();</code></pre><blockquote><p>在 eval()中创建的任何变量或函数都不会被提升，因为在解析代码的时候，它们被包含在一个字 符串中；它们只在 eval()执行的时候创建。</p></blockquote><ol start="3"><li>Global 对象的属性</li></ol><p>Global 对象还包含一些属性， 其中一部分属性已经在本书前面介绍过了。 例如， 特殊的值 undefined、NaN 以及 Infinity 都是 Global 对象的属性。此外，所有原生引用类型的构造函数，像 Object 和 Function，也都是 Global 对象的属性。下表列出了 Global 对象的所有属性。</p><ol start="4"><li>window 对象</li></ol><p>ECMAScript 虽然没有指出如何直接访问 Global 对象，但 Web 浏览器都是将这个全局对象作为 window 对象的一部分加以实现的。因此，在全局作用域中声明的所有变量和函数，就都成为了 window 对象的属性。</p><p>取得全局对象的方法</p><pre><code class="js">var global = function(){  return this}()</code></pre><h2 id="5-7-2-Math对象"><a href="#5-7-2-Math对象" class="headerlink" title="5.7.2 Math对象"></a>5.7.2 Math对象</h2><p>ECMAScript 还为保存数学公式和信息提供了一个公共位置，即 Math 对象。与我们在 JavaScript 直 接编写的计算功能相比，Math 对象提供的计算功能执行起来要快得多。Math 对象中还提供了辅助完成 这些计算的属性和方法。</p><ol><li>Math 对象的属性</li></ol><p>Math.E 自然对数的底数</p><ol start="2"><li>min()和max()方法</li></ol><p>Math 对象还包含许多方法，用于辅助完成简单和复杂的数学计算。</p><pre><code class="js">var max = Math.max(3, 54, 32, 16);//54var min = Math.min(3, 54, 32, 16);//3</code></pre><p>要找到数组中的最大或最小值，可以像下面这样使用 apply()方法。</p><pre><code class="js">var values = [1, 2, 3, 4, 5, 6, 7, 8];var max = Math.max.apply(Math,values)//这个技巧的关键是把 Math 对象作为 apply()的第一个参数，从而正确地设置 this 值。然后，可 以将任何数组作为第二个参数。</code></pre><ol start="3"><li>舍入方法</li></ol><ul><li>Math.ceil()  执行向上舍入，即它总是将数值向上舍入为最接近的整数；</li><li>Math.floor()执行向下舍入，即它总是将数值向下舍入为最接近的整数；</li><li>Math.round() 执行标准舍入，即它总是将数值四舍五 上学到的舍入规则）。</li></ul><ol start="4"><li>random()方法</li></ol><p>Math.random()方法返回大于等于 0 小于 1 的一个随机数。对于某些站点来说，这个方法非常实用， 12 因为可以利用它来随机显示一些名人名言和新闻事件。套用下面的公式，就可以利用 Math.random() 从某个整数范围内随机选择一个值。</p><p><code>值 = Math.floor(Math.random() * 可能值的总数 + 第一个可能的值)</code></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级程序设计 </tag>
            
            <tag> JS基本概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS高级程序设计】第六章 面向对象的程序设计</title>
      <link href="/passages/%E3%80%90JS%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%91%E7%AC%AC%E5%85%AD%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/passages/%E3%80%90JS%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%91%E7%AC%AC%E5%85%AD%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>面向对象（Object-Oriented，OO）的语言有一个标志，那就是它们都有类的概念，而通过类可 以创建任意多个具有相同属性和方法的对象。前面提到过，ECMAScript 中没有类的概念，因 此它的对象也与基于类的语言中的对象有所不同。</p><h1 id="6-1-理解对象"><a href="#6-1-理解对象" class="headerlink" title="6.1  理解对象"></a>6.1  理解对象</h1><p>简单创建一个对象</p><pre><code class="js">var person = new Object()person.name = &#39;chenyu&#39;person.age = 25person.sayName = function(){  return this.name}</code></pre><p>使用字面量创建对象</p><pre><code class="js">var person = {  name: &quot;chenyu&quot;,  age:25,  sayName:function(){    return this.name  }}</code></pre><h2 id="6-1-1-属性类型"><a href="#6-1-1-属性类型" class="headerlink" title="6.1.1 属性类型"></a>6.1.1 属性类型</h2><p>ECMAScript 中有两种属性：数据属性和访问器属性。</p><ol><li>数据属性</li></ol><ul><li>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特 性，或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性，它们的 这个特性默认值为 true。</li><li>[[Enumerable]]：表示能否通过 for-in 循环返回属性。像前面例子中那样直接在对象上定 义的属性，它们的这个特性默认值为 true。</li><li>[[Writable]]：表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的 这个特性默认值为 true。</li><li>[[Value]]：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候， 把新值保存在这个位置。这个特性的默认值为 undefined。</li></ul><p>对于像前面例子中那样直接在对象上定义的属性，它们的[[Configurable]]、[[Enumerable]] 和[[Writable]]特性都被设置为 true，而[[Value]]特性被设置为指定的值。</p><p>要修改属性默认的特性，必须使用 ECMAScript 5 的 Object.defineProperty()方法。这个方法 接收三个参数：属性所在的对象、属性的名字和一个描述符对象。其中，描述符（descriptor）对象的属 性必须是：configurable、enumerable、writable 和 value。设置其中的一或多个值，可以修改 对应的特性值。</p><pre><code class="js">var person = {}Object.defineProperty(&#39;person&#39;,&#39;name&#39;,{  value:&quot;chenyu&quot;,  writable:false})person.name // chenyuperson.name = &#39;test&#39; person.name // chenyu</code></pre><p>类似的规则也适用于不可配置的属性。</p><pre><code class="js">var person = {}Object.defineProperty(&#39;person&#39;,&#39;name&#39;,{  value:&quot;chenyu&quot;,  configurable:false})person.name // chenyuperson.name = &#39;test&#39; delete person.name //falseperson.name // chenyu</code></pre><p>一旦把属性定义为不可配置的， 就不能再把它变回可配置了。</p><p>此时，再调用 Object.defineProperty()方法修改除 writable 之外 的特性，都会导致错误</p><blockquote><p>在调用 Object.defineProperty() 方法时， 如果不指定， configurable 、 enumerable 和 writable 特性的默认值都是 false。多数情况下，可能都没有必要利用 Object.defineProperty() 方法提供的这些高级功能。不过，理解这些概念对理解 JavaScript 对象却非常有用。</p></blockquote><ol start="2"><li>访问器属性</li></ol><p>访问器属性不包含数据值；它们包含一对儿 getter 和 setter 函数（不过，这两个函数都不是必需的）。 在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效的值；在写入访问器属性时，会调用 setter 函数并传入新值，这个函数负责决定如何处理数据。访问器属性有如下 4 个特性。</p><ul><li>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特 性， 或者能否把属性修改为数据属性。 对于直接在对象上定义的属性， 这个特性的默认值为 true。</li><li>[[Enumerable]]：表示能否通过 for-in 循环返回属性。对于直接在对象上定义的属性，这 个特性的默认值为 true。</li><li>[[Get]]：在读取属性时调用的函数。默认值为 undefined。</li><li>[[Set]]：在写入属性时调用的函数。默认值为 undefined。</li></ul><pre><code class="js">var book = { _year: 2004, edition: 1 };Object.defineProperty(book,&#39;year&#39;,{  get:function(){    return this._year  },  set:function(newValue){    if(newValue &gt; this._year){       this._year = newValue      this.edition += newValue - 2004       }  }})</code></pre><p>以上代码创建了一个 book 对象，并给它定义两个默认的属性：_year 和 edition。_year 前面 的下划线是一种常用的记号，用于表示只能通过对象方法访问的属性。而访问器属性 year 则包含一个 getter 函数和一个 setter 函数。getter 函数返回_year 的值，setter 函数通过计算来确定正确的版本。因此， 把 year 属性修改为 2005 会导致_year 变成 2005，而 edition 变为 2。这是使用访问器属性的常见方 式，即设置一个属性的值会导致其他属性发生变化。</p><p>不一定非要同时指定 getter 和 setter。只指定 getter 意味着属性是不能写，尝试写入属性会被忽略。 在严格模式下，尝试写入只指定了 getter 函数的属性会抛出错误。类似地，只指定 setter 函数的属性也 不能读，否则在非严格模式下会返回 undefined，而在严格模式下会抛出错误。</p><blockquote><p>支持 ECMAScript 5 的这个方法的浏览器有 IE9+（IE8 只是部分实现）、Firefox 4+、Safari 5+、Opera 12+ 和 Chrome 。 在 这 个 方 法 之 前 ， 要 创 建 访 问 器 属 性 ， 一 般 都 使 用 两 个 非 标 准 的 方 法 ： __defineGetter__()和__defineSetter__()。这两个方法最初是由 Firefox 引入的，后来 Safari 3、 Chrome 1 和 Opera 9.5 也给出了相同的实现。</p></blockquote><h2 id="6-1-2-定义多个属性"><a href="#6-1-2-定义多个属性" class="headerlink" title="6.1.2 定义多个属性"></a>6.1.2 定义多个属性</h2><p>由于为对象定义多个属性的可能性很大， ECMAScript 5 又定义了一个 Object.defineProperties()方法。利用这个方法可以通过描述符一次定义多个属性。这个方法接收两个对象参数：第一 个对象是要添加和修改其属性的对象，第二个对象的属性与第一个对象中要添加或修改的属性一一对 应。</p><pre><code class="js">var person  = {}Object.defineProperties(person,{  _year:{    value:2004  },  edition:{    value:1  },  name:{    value:&#39;chenyu&#39;,    configurable:false  },  year:{    get:function(){      return this._year    },    set:function(newValue){      if(newValue &gt; 2004){             this._year = newValue,            this.edition += newValue - 2004         }    }  }})</code></pre><h2 id="6-1-3-读取属性的特性"><a href="#6-1-3-读取属性的特性" class="headerlink" title="6.1.3 读取属性的特性"></a>6.1.3 读取属性的特性</h2><p>使用 ECMAScript 5 的 Object.getOwnPropertyDescriptor()方法，可以取得给定属性的描述符。这个方法接收两个参数：属性所在的对象和要读取其描述符的属性名称。返回值是一个对象，如果 是访问器属性，这个对象的属性有 configurable、enumerable、get 和 set；如果是数据属性，这 个对象的属性有 configurable、enumerable、writable 和 value</p><pre><code class="js">var person  = {}Object.defineProperties(person,{  _year:{    value:2004  },  edition:{    value:1  },  name:{    value:&#39;chenyu&#39;,    configurable:false  },  year:{    get:function(){      return this._year    },    set:function(newValue){      if(newValue &gt; 2004){             this._year = newValue,            this.edition += newValue - 2004         }    }  }})var properties = Object.getOwnPropertyDescriptor(book,&#39;name&#39;) // {value: &quot;chenyu&quot;, writable: false, enumerable: false, configurable: false}Object.getOwnPropertyDescriptor(person,&#39;year&#39;)//{enumerable: false, configurable: false, get: ƒ, set: ƒ}</code></pre><h1 id="6-2-创建对象"><a href="#6-2-创建对象" class="headerlink" title="6.2 创建对象"></a>6.2 创建对象</h1><p>虽然 Object 构造函数或对象字面量都可以用来创建单个对象，但这些方式有个明显的缺点：使用同 一个接口创建很多对象，会产生大量的重复代码。为解决这个问题，人们开始使用工厂模式的一种变体。</p><h2 id="6-2-1-工厂模式（用于创建出相似的对象）"><a href="#6-2-1-工厂模式（用于创建出相似的对象）" class="headerlink" title="6.2.1 工厂模式（用于创建出相似的对象）"></a>6.2.1 工厂模式（用于创建出相似的对象）</h2><p>工厂模式是软件工程领域一种广为人知的设计模式，这种模式抽象了创建具体对象的过程，考虑到在 ECMAScript 中无法创建类，开发人员 就发明了一种函数，用函数来封装以特定接口创建对象的细节。</p><pre><code class="js">function createPerson(name,age,job){  var o = new Object()  o.name = name  o.age = age  o.job = job  o.sayName = function(){    alert(this.name)  }  return o}var tom = createPerson(&#39;tom&#39;,20,&#39;The engineer&#39;)var jerry = createPerson(&#39;jerry&#39;,20,&#39;mouse&#39;)</code></pre><p>函数 createPerson()能够根据接受的参数来构建一个包含所有必要信息的 Person 对象。可以无 数次地调用这个函数，而每次它都会返回一个包含三个属性一个方法的对象。工厂模式虽然解决了创建 多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）。随着 JavaScript 的发展，又一个新模式出现了。</p><h2 id="6-2-2-构造函数模式（区别对象的类型）"><a href="#6-2-2-构造函数模式（区别对象的类型）" class="headerlink" title="6.2.2 构造函数模式（区别对象的类型）"></a>6.2.2 构造函数模式（区别对象的类型）</h2><p>上述代码可以改写成：</p><pre><code class="js">function Person(name,age,job){  this.name = name  this.age = age  this.job = job  this.sayName = function(){    alert(this.name)  }}var tom = new Person(&#39;tom&#39;,20,&#39;The engineer&#39;)var jerry = new Person(&#39;jerry&#39;,20,&#39;mouse&#39;)</code></pre><p>创建了两个实例对象Tom、Jerry，他们都有一个构造函数属性指向构造函数</p><pre><code class="js">tom.constructor  == Personjerry.constructor  == Person</code></pre><p>在这个例子中，Person()函数取代了 createPerson()函数。我们注意到，Person()中的代码 除了与 createPerson()中相同的部分外，还存在以下不同之处：</p><ul><li>没有显式地创建对象；</li><li>直接将属性和方法赋给了 this 对象；</li><li>没有 return 语句</li></ul><blockquote><p>此外，还应该注意到函数名 Person 使用的是大写字母 P。按照惯例，构造函数始终都应该以一个 大写字母开头，而非构造函数则应该以一个小写字母开头。这个做法借鉴自其他 OO 语言，主要是为了 区别于 ECMAScript 中的其他函数；因为构造函数本身也是函数，只不过可以用来创建对象而已。</p></blockquote><p>要创建 Person 的新实例，必须使用 new 操作符。以这种方式调用构造函数实际上会经历以下 4 个步骤：</p><ol><li>创建一个新对象；</li><li>将函数的作用域赋值给新对象，当前的this会指向新对象</li><li>执行构造函数中的代码（为这个新对象添加属性）；</li><li>返回新对象</li></ol><p>对象的 constructor 属性最初是用来标识对象类型的。但是，提到检测对象类型，还是 instanceof 操作符要更可靠一些。我们在这个例子中创建的所有对象既是 Object 的实例，同时也是 Person 的实例，这一点通过 instanceof 操作符可以得到验证。</p><pre><code class="js">tom instanceof Object // truetom instanceof Person // truejerry instanceof Object // truejerry instanceof Person // true</code></pre><p>创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型；而这正是构造函数模式 胜过工厂模式的地方。在这个例子中，person1 和 person2 之所以同时是 Object 的实例，是因为所 有对象均继承自 Object。</p><ol><li>将构造函数当作函数</li></ol><p>构造函数与其他函数的唯一区别，就在于调用它们的方式不同。不过，构造函数毕竟也是函数，不 存在定义构造函数的特殊语法。任何函数，只要通过 new 操作符来调用，那它就可以作为构造函数；而 任何函数，如果不通过 new 操作符来调用，那它跟普通函数也不会有什么两样。例如，前面例子中定义 的 Person()函数可以通过下列任何一种方式来调用。</p><pre><code class="js">// 当作构造函数使用var person = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;); person.sayName();  //&quot;Nicholas&quot;//当作普通函数使用Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;); window.name  // Nicholas//在另一个对象的作用域中调用var o = new ObjectPerson.call(o,&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;)o.name // Nicholas</code></pre><p>这个例子中的前两行代码展示了构造函数的典型用法，即使用 new 操作符来创建一个新对象。接下 来的两行代码展示了不使用 new 操作符调用 Person()会出现什么结果：属性和方法都被添加给 window 对象了。有读者可能还记得，当在全局作用域中调用一个函数时，this 对象总是指向 Global 对象（在 浏览器中就是 window 对象）。因此，在调用完函数之后，可以通过 window 对象来调用 sayName()方 法，并且还返回了”Greg”。最后，也可以使用 call()（或者 apply()）在某个特殊对象的作用域中 调用 Person()函数。这里是在对象 o 的作用域中调用的，因此调用后 o 就拥有了所有属性和 sayName() 方法。</p><ol start="2"><li>构造函数的问题</li></ol><p>构造函数模式虽然好用，但也并非没有缺点。使用构造函数的主要问题，就是每个方法都要在每个 实例上重新创建一遍。在前面的例子中，person1 和 person2 都有一个名为 sayName()的方法，但那 两个方法不是同一个 Function 的实例。不要忘了——ECMAScript 中的函数是对象，因此每定义一个 函数，也就是实例化了一个对象。从逻辑角度讲，此时的构造函数也可以这样定义。</p><pre><code class="js">function Person(name, age, job){ this.name = name; this.age = age; this.job = job; this.sayName = new Function(&quot;alert(this.name)&quot;); // 与声明函数在逻辑上是等价的 }</code></pre><p>从这个角度上来看构造函数，更容易明白每个 Person 实例都包含一个不同的 Function 实例（以 显示 name 属性）的本质。说明白些，以这种方式创建函数，会导致不同的作用域链和标识符解析，但 创建 Function 新实例的机制仍然是相同的。</p><pre><code class="js">tom.sayName == jerry.sayName // false</code></pre><pre><code class="js">function Person(name, age, job){ this.name = name; this.age = age; this.job = job; this.sayName = sayName; }function sayName(){  alert(this.name)}var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;); var person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;);person1.sayName == person2.sayName // true</code></pre><p>在这个例子中，我们把 sayName()函数的定义转移到了构造函数外部。而在构造函数内部，我们 将 sayName 属性设置成等于全局的 sayName 函数。这样一来，由于 sayName 包含的是一个指向函数 的指针，因此 person1 和 person2 对象就共享了在全局作用域中定义的同一个 sayName()函数。这 样做确实解决了两个函数做同一件事的问题，可是新问题又来了：在全局作用域中定义的函数实际上只 能被某个对象调用，这让全局作用域有点名不副实。而更让人无法接受的是：如果对象需要定义很多方 法，那么就要定义很多个全局函数，于是我们这个自定义的引用类型就丝毫没有封装性可言了。好在， 这些问题可以通过使用原型模式来解决。</p><h2 id="6-2-3-原型模式"><a href="#6-2-3-原型模式" class="headerlink" title="6.2.3 原型模式"></a>6.2.3 原型模式</h2><p>我们创建的每个函数都有一个 prototype（原型）属性，这个属性是一个指针，指向一个对象， 而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。如果按照字面意思来理解，那 么 prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以 让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是 可以将这些信息直接添加到原型对象中，如下面的例子所示。</p><pre><code class="js">function Person(){ }Person.prototype.name = &quot;Nicholas&quot;;Person.prototype.age = 29; Person.prototype.job = &quot;Software Engineer&quot;; Person.prototype.sayName = function(){ alert(this.name); };var person1 = new Person(); person1.sayName(); //&quot;Nicholas&quot;var person2 = new Person();person2.sayName(); //&quot;Nicholas&quot;alert(person1.sayName == person2.sayName);//true</code></pre><p>在此，我们将 sayName()方法和所有属性直接添加到了 Person 的 prototype 属性中，构造函数 变成了空函数。即使如此，也仍然可以通过调用构造函数来创建新对象，而且新对象还会具有相同的属 性和方法。但与构造函数模式不同的是，新对象的这些属性和方法是由所有实例共享的。换句话说， person1 和 person2 访问的都是同一组属性和同一个 sayName()函数。要理解原型模式的工作原理， 必须先理解 ECMAScript 中原型对象的性质。</p><ol><li>理解原型对象</li></ol><p>无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个 prototype 属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个 constructor （构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针。就拿前面的例子来说， Person.prototype. constructor 指向 Person。而通过这个构造函数，我们还可继续为原型对象 添加其他属性和方法。</p><p>创建了自定义的构造函数之后，其原型对象默认只会取得 constructor 属性；至于其他方法，则 都是从 Object 继承而来的。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部 属性），指向构造函数的原型对象。ECMA-262 第 5 版中管这个指针叫[[Prototype]]。虽然在脚本中 没有标准的方式访问 [[Prototype]] ， 但 Firefox、Safari 和 Chrome 在每个对象上都支持一个属性 <strong>proto</strong>；而在其他实现中，这个属性对脚本则是完全不可见的。<strong><em>不过，要明确的真正重要的一点就 是，这个连接存在于实例与构造函数的原型对象之间，而不是存在于实例与构造函数之间。</em></strong></p><p>虽然在所有实现中都无法访问到[[Prototype]]，但可以通过 isPrototypeOf()方法来确定对象之 间是否存在这种关系。 从本质上讲， 如果 [[Prototype]] 指向调用 isPrototypeOf() 方法的对象 （Person.prototype），那么这个方法就返回 true</p><pre><code class="js">Person.prototype.isProtytypeOf(person1) //truePerson.prototype.isPrototypeOf(person2) // true</code></pre><p>ECMAScript 5 增加了一个新方法，叫 Object.getPrototypeOf()，在所有支持的实现中，这个 方法返回[[Prototype]]的值。例如：</p><pre><code class="js">Object.getPrototypeOf(person1) == Person.prototype //trueObject.getPrototypeOf(person1).name //Nicholas</code></pre><blockquote><p>使用 Object.getPrototypeOf() 可以方便地取得一个对象的原型，而这在利用原型实现继承（本章稍后会讨论）的情况下是非常重要的。</p></blockquote><p>​    每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先 从对象实例本身开始。如果在实例中找到了具有给定名字的属性，则返回该属性的值；如果没有找到， 则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性。如果在原型对象中找到了这 个属性，则返回该属性的值。也就是说，在我们调用 person1.sayName()的时候，会先后执行两次搜 索。首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。”然后，它继续搜索，再 问：“person1 的原型有 sayName 属性吗？”答：“有。”于是，它就读取那个保存在原型对象中的函 数。当我们调用 person2.sayName()时，将会重现相同的搜索过程，得到相同的结果。而这正是多个 对象实例共享原型所保存的属性和方法的基本原理。</p><blockquote><p>前面提到过，原型最初只包含 constructor 属性，而该属性也是共享的，因此 可以通过对象实例访问。</p></blockquote><p>如果在实例对象中定义的属性名与原型对象中的属性名冲突，则会屏蔽原型对象中的属性值</p><pre><code class="js">function Person(){}Person.prototype,name = &#39;Nicholas&#39;Person.prototype.age = 20Person.prototype.sayName = function(){  return this.name}var person1 = new Person()var person2 = new Person()person1.name // &#39;Nicholas&#39;person1.name = &#39;chenyu&#39; person1.name // chenyuperson2.name // &#39;Nicholas&#39;</code></pre><p>在这个例子中，person1 的 name 被一个新值给屏蔽了。但无论访问 person1.name 还是访问 person2.name 都能够正常地返回值，即分别是”Greg”（来自对象实例）和”Nicholas”（来自原型）。 当在 alert()中访问 person1.name 时，需要读取它的值，因此就会在这个实例上搜索一个名为 name 的属性。这个属性确实存在，于是就返回它的值而不必再搜索原型了。当以同样的方式访问 person2. name 时，并没有在实例上发现该属性，因此就会继续搜索原型，结果在那里找到了 name 属性。</p><p>当为对象实例添加一个属性时，这个属性就会屏蔽原型对象中保存的同名属性；换句话说，添加这 个属性只会阻止我们访问原型中的那个属性，但不会修改那个属性。即使将这个属性设置为 null，也 只会在实例中设置这个属性，而不会恢复其指向原型的连接。不过，使用 delete 操作符则可以完全删 除实例属性，从而让我们能够重新访问原型中的属性，</p><pre><code class="js">delete person1.name person1.name // &quot;Nicholas&quot;</code></pre><p>使用 hasOwnProperty()方法可以检测一个属性是存在于实例中，还是存在于原型中。这个方法（不 要忘了它是从 Object 继承来的）只在给定属性存在于对象实例中时，才会返回 true。</p><p>## </p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级程序设计 </tag>
            
            <tag> JS基本概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS高级程序设计】第四章 变量、作用域和内存问题</title>
      <link href="/passages/%E3%80%90JS%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%91%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/"/>
      <url>/passages/%E3%80%90JS%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%91%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="4-1基本类型和引用类型的值"><a href="#4-1基本类型和引用类型的值" class="headerlink" title="4.1基本类型和引用类型的值"></a>4.1基本类型和引用类型的值</h1><p>基本类型：</p><ul><li>undefined</li><li>null</li><li>Boolean</li><li>Number</li><li>String</li></ul><p>引用类型：</p><ul><li>Object</li><li>Function</li><li>Array</li></ul><p>引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript 不允许直接访问内存中的位置， 也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。 为此，引用类型的值是按引用访问的<a id="more"></a></p><h2 id="4-1-1-动态的属性"><a href="#4-1-1-动态的属性" class="headerlink" title="4.1.1 动态的属性"></a>4.1.1 动态的属性</h2><p>定义基本类型值和引用类型值的方式是类似的：创建一个变量并为该变量赋值。但是，当这个值保 存到变量中以后，对不同类型值可以执行的操作则大相径庭。对于引用类型的值，我们可以为其添加属 性和方法，也可以改变和删除其属性和方法。</p><pre><code class="js">var person = new Object()person.name = &quot;nico&quot;alert(person.name) //nico</code></pre><p>以上代码创建了一个对象并将其保存在了变量 person 中。然后，我们为该对象添加了一个名为 name 的属性，并将字符串值”nico”赋给了这个属性。紧接着，又通过 alert()函数访问了这个 新属性。如果对象不被销毁或者这个属性不被删除，则这个属性将一直存在。</p><p>但是，我们不能给基本类型的值添加属性，尽管这样做不会导致任何错误:</p><pre><code class="js">var name = &quot;nico&quot;name.age = 27console.log(name.age) //undefined</code></pre><p>我们为字符串 name 定义了一个名为 age 的属性，并为该属性赋值 27。但在下一 行访问这个属性时，发现该属性不见了。这说明只能给引用类型值动态地添加属性，以便将来使用。</p><h2 id="4-1-2-复制变量的值"><a href="#4-1-2-复制变量的值" class="headerlink" title="4.1.2 复制变量的值"></a>4.1.2 复制变量的值</h2><p>除了保存的方式不同之外，在从一个变量向另一个变量复制基本类型值和引用类型值时，也存在不 同。如果从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制 到为新变量分配的位置上。</p><p><code>var num = 5</code></p><p><code>num1 = num</code></p><p>在此，num1 中保存的值是 5。当使用 num1 的值来初始化 num2 时，num2 中也保存了值 5。但 num2 中的 5 与 num1 中的 5 是完全独立的，该值只是 num1 中 5 的一个副本。此后，这两个变量可以参与任 何操作而不会相互影响。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdjbtzlng9j30v40u0whn.jpg" alt="image-20200405235141610"></p><p>当从一个变量向另一个变量复制引用类型的值时，同样也会将存储在变量对象中的值复制一份放到 为新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一 个对象。复制操作结束后，两个变量实际上将引用同一个对象。因此，改变其中一个变量，就会影响另 一个变量。</p><pre><code class="js">var obj1 = new Object()var obj2 = obj1obj1.name = &#39;nico&#39;console.log(obj2.name) //nico//此时共享一个堆</code></pre><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdjbw8o3pqj31le0tqah5.jpg" alt="image-20200405235413164"></p><h2 id="4-1-3-传递参数"><a href="#4-1-3-传递参数" class="headerlink" title="4.1.3 传递参数"></a>4.1.3 传递参数</h2><p>在向参数传递基本类型的值时， 被传递的值会被复制给一个局部变量（即命名参数， 或者用 ECMAScript 的概念来说，就是 arguments 对象中的一个元素）。<u><strong><em>在向参数传递引用类型的值时，会把 这个值在内存中的地址复制给一个局部变量</em></strong></u>，因此这个局部变量的变化会反映在函数的外部。</p><pre><code class="js">function addTen(num){  num += 10  return num}var a = 10var result = addTen(a)a // 10 未改变result // 20</code></pre><p>这里的函数 addTen()有一个参数 num，而参数实际上是函数的局部变量。在调用这个函数时，变 量 count 作为参数被传递给函数，这个变量的值是20。于是，数值20被复制给参数 num 以便在 addTen() 中使用。在函数内部，参数 num 的值被加上了 10，但这一变化不会影响函数外部的 count 变量。参数 num 与变量 count 互不相识，它们仅仅是具有相同的值。假如 num 是按引用传递的话，那么变量 count 的值也将变成 30，从而反映函数内部的修改。</p><pre><code class="js">function setName(obj){  obj.name = &#39;nico&#39;  obj = new Object()  obj.name = &#39;nico1&#39;}var person = {}setName(person)person.name //nico</code></pre><p>这个例子与前一个例子的唯一区别，就是在 setName()函数中添加了两行代码：一行代码为 obj 重新定义了一个对象，另一行代码为该对象定义了一个带有不同值的 name 属性。在把 person 传递给 setName()后，其 name 属性被设置为”Nicholas”。然后，又将一个新对象赋给变量 obj，同时将其 name 属性设置为”Greg”。如果 person 是按引用传递的，那么 person 就会自动被修改为指向其 name 属性值 为”Greg”的新对象。但是，当接下来再访问 person.name 时，显示的值仍然是”Nicholas”。这说明 即使在函数内部修改了参数的值，但原始的引用仍然保持未变。实际上，当在函数内部重写 obj 时，这 个变量引用的就是一个局部对象了。而这个局部对象会在函数执行完毕后立即被销毁。</p><blockquote><p>可以把 ECMAScript 函数的参数想象成局部变量。</p></blockquote><h2 id="4-1-4-检测类型"><a href="#4-1-4-检测类型" class="headerlink" title="4.1.4 检测类型"></a>4.1.4 检测类型</h2><p>基本数据类型检测：typeof</p><p>对象类型检测：A instanceof B , A是B的实例对象</p><blockquote><p>根据规定，所有引用类型的值都是 Object 的实例。因此，在检测一个引用类型值和 Object 构造 函数时，instanceof 操作符始终会返回 true。当然，如果使用 instanceof 操作符检测基本类型的 值，则该操作符始终会返回 false，因为基本类型不是对象。</p></blockquote><h1 id="4-2-执行环境"><a href="#4-2-执行环境" class="headerlink" title="4.2 执行环境"></a>4.2 执行环境</h1><p>执行环境（execution context，为简单起见，有时也称为“环境”）是 JavaScript 中最为重要的一个概 念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个 与之关联的变量对象（variable object），环境中定义的所有变量和函数都保存在这个对象中。虽然我们 编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。</p><p>全局执行环境是最外围的一个执行环境。根据 ECMAScript 实现所在的宿主环境不同，表示执行环 境的对象也不一样。在 Web 浏览器中，全局执行环境被认为是 window 对象（第 7 章将详细讨论），因 此所有全局变量和函数都是作为 window 对象的属性和方法创建的。某个执行环境中的所有代码执行完 毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退 出——例如关闭网页或浏览器——时才会被销毁）。</p><p>每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。 而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。ECMAScript 程序中的执行流 正是由这个方便的机制控制着。</p><p>当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的用途，是 保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所 在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object）作为变量对象。活动对 象在最开始时只包含一个变量，即 arguments 对象（这个对象在全局环境中是不存在的）。作用域链中 的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。这样，一直延 续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。</p><p>标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始， 然后逐级地向后回溯，直至找到标识符为止（如果找不到标识符，通常会导致错误发生）。</p><h2 id="4-2-2-没有块级作用域"><a href="#4-2-2-没有块级作用域" class="headerlink" title="4.2.2 没有块级作用域"></a>4.2.2 没有块级作用域</h2><p>JavaScript 没有块级作用域经常会导致理解上的困惑。在其他类 C 的语言中，由花括号封闭的代码 块都有自己的作用域（如果用 ECMAScript 的话来讲，就是它们自己的执行环境），因而支持根据条件来 定义变量。</p><p>例如，下面的代码在 JavaScript 中并不会得到想象中的结果：</p><pre><code class="js">if (true) { var color = &quot;blue&quot;; }alert(color);//&quot;blue&quot;</code></pre><pre><code class="js">for(var i in arrs){}//此时i为定义的全局变量，for语句执行完以后也不会被销毁</code></pre><ol><li><p>声明变量</p><p>使用 var 声明的变量会自动被添加到最接近的环境中。在函数内部，最接近的环境就是函数的局部 环境；</p><p>在 with 语句中，最接近的环境是函数环境。如果初始化变量时没有使用 var 声明，该变量会自 动被添加到全局环境。</p></li><li><p>查询标识符</p><p>当在某个环境中为了读取或写入而引用一个标识符时，必须通过搜索来确定该标识符实际代表什 么。搜索过程从作用域链的前端开始，向上逐级查询与给定名字匹配的标识符。如果在局部环境中找到 了该标识符，搜索过程停止，变量就绪。如果在局部环境中没有找到该变量名，则继续沿作用域链向上 搜索。搜索过程将一直追溯到全局环境的变量对象。如果在全局环境中也没有找到这个标识符，则意味 着该变量尚未声明。</p><pre><code class="js">var color = &#39;red&#39;function getColor(){  return color}getColor() //red</code></pre><p>调用本例中的函数 getColor()时会引用变量 color。为了确定变量 color 的值，将开始一个两 步的搜索过程。首先，搜索 getColor()的变量对象，查找其中是否包含一个名为 color 的标识符。 在没有找到的情况下， 搜索继续到下一个变量对象（全局环境的变量对象）， 然后在那里找到了名为 color 的标识符。因为搜索到了定义这个变量的变量对象，搜索过程宣告结束。</p><p>在这个搜索过程中，如果存在一个局部的变量的定义，则搜索会自动停止，不再进入另一个变量对 象。换句话说，如果局部环境中存在着同名标识符，就不会使用位于父环境中的标识符</p><pre><code class="js">var color = &#39;red&#39;function getColor(){  var color = &#39;blue&#39;  return color}getColor() // blue</code></pre><blockquote><p>上述例子：先搜寻函数内部变量是否有color这个标识符，找到了就返回，不会再往上搜索</p></blockquote><blockquote><p>变量查询也不是没有代价的。很明显，访问局部变量要比访问全局变量更快，因 为不用向上搜索作用域链。JavaScript 引擎在优化标识符查询方面做得不错，因此这 个差别在将来恐怕就可以忽略不计了。</p></blockquote></li></ol><h1 id="4-3-垃圾处理"><a href="#4-3-垃圾处理" class="headerlink" title="4.3 垃圾处理"></a>4.3 垃圾处理</h1><p>JavaScript 具有自动垃圾收集机制，也就是说，执行环境会负责管理代码执行过程中使用的内存。</p><p>在编写 JavaScript 程序时，开发人员不用再关心内存使用问题，所需内存的分配以及无 用内存的回收完全实现了自动管理。这种垃圾收集机制的原理其实很简单：找出那些不再继续使用的变 量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间）， 周期性地执行这一操作。</p><h2 id="4-3-1-标记清除"><a href="#4-3-1-标记清除" class="headerlink" title="4.3.1 标记清除"></a>4.3.1 标记清除</h2><p>JavaScript 中最常用的垃圾收集方式是标记清除（mark-and-sweep）。当变量进入环境（例如，在函 数中声明一个变量）时，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其 标记为“离开环境”。</p><p>可以使用任何方式来标记变量。比如，可以通过翻转某个特殊的位来记录一个变量何时进入环境， 或者使用一个“进入环境的”变量列表及一个“离开环境的”变量列表来跟踪哪个变量发生了变化。说 到底，如何标记变量其实并不重要，关键在于采取什么策略。</p><blockquote><p>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方 式）。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记 的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾收集器 完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。</p></blockquote><h2 id="4-3-2-引用计数"><a href="#4-3-2-引用计数" class="headerlink" title="4.3.2 引用计数"></a>4.3.2 引用计数</h2><p>另一种不太常见的垃圾收集策略叫做引用计数（reference counting）。引用计数的含义是跟踪记录每 个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是 1。 如果同一个值又被赋给另一个变量，则该值的引用次数加 1。相反，如果包含对这个值引用的变量又取 得了另外一个值，则这个值的引用次数减 1。当这个值的引用次数变成 0 时，则说明没有办法再访问这 个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾收集器下次再运行时，它就会释放那 些引用次数为零的值所占用的内存。</p><pre><code class="js">var a = {  name : &quot;test&quot;}//此时在内存中的这个对象被引用了一次，被引用计数标记为1var b = a //被引用计数标记为2var a = {} //上一个对象的引用计数标记减少了一次，标记为1var b = {}//第一个对象的引用计数少了一次，标记为0，被清理内存</code></pre><p>Netscape Navigator 3.0 是最早使用引用计数策略的浏览器，但很快它就遇到了一个严重的问题：循 环引用。循环引用指的是对象 A 中包含一个指向对象 B 的指针，而对象 B 中也包含一个指向对象 A 的 引用。请看下面这个例子：</p><pre><code class="js">function problem(){var objectA = new Object();var objectB = new Object();objectA.someOtherObject = objectB;objectB.anotherObject = objectA;}</code></pre><p>在这个例子中，objectA 和 objectB 通过各自的属性相互引用；也就是说，这两个对象的引用次 数都是 2。在采用标记清除策略的实现中，由于函数执行之后，这两个对象都离开了作用域，因此这种 相互引用不是个问题。但在采用引用计数策略的实现中，当函数执行完毕后，objectA 和 objectB 还 将继续存在，因为它们的引用次数永远不会是 0。假如这个函数被重复多次调用，就会导致大量内存得 不到回收。为此，Netscape 在 Navigator 4.0 中放弃了引用计数方式，转而采用标记清除来实现其垃圾收 集机制。可是，引用计数导致的麻烦并未就此终结。</p><h2 id="4-3-3-性能问题"><a href="#4-3-3-性能问题" class="headerlink" title="4.3.3 性能问题"></a>4.3.3 性能问题</h2><p>垃圾收集器是周期性运行的，而且如果为变量分配的内存数量很可观，那么回收工作量也是相当大 的。在这种情况下，确定垃圾收集的时间间隔是一个非常重要的问题。说到垃圾收集器多长时间运行一 次，不禁让人联想到 IE 因此而声名狼藉的性能问题。IE 的垃圾收集器是根据内存分配量运行的，具体 一点说就是 256 个变量、4096 个对象（或数组）字面量和数组元素（slot）或者 64KB 的字符串。达到 上述任何一个临界值，垃圾收集器就会运行。这种实现方式的问题在于，如果一个脚本中包含那么多变 量，那么该脚本很可能会在其生命周期中一直保有那么多的变量。而这样一来，垃圾收集器就不得不频 繁地运行。结果，由此引发的严重性能问题促使 IE7 重写了其垃圾收集例程。</p><p>随着 IE7 的发布，其 JavaScript 引擎的垃圾收集例程改变了工作方式：触发垃圾收集的变量分配、 字面量和（或）数组元素的临界值被调整为动态修正。IE7 中的各项临界值在初始时与 IE6 相等。如果 垃圾收集例程回收的内存分配量低于 15%，则变量、字面量和（或）数组元素的临界值就会加倍。如果 例程回收了 85%的内存分配量，则将各种临界值重置回默认值。这一看似简单的调整，极大地提升了 IE 在运行包含大量 JavaScript 的页面时的性能。</p><h2 id="4-3-4-管理内存"><a href="#4-3-4-管理内存" class="headerlink" title="4.3.4 管理内存"></a>4.3.4 管理内存</h2><p>使用具备垃圾收集机制的语言编写程序，开发人员一般不必操心内存管理的问题。但是，JavaScript 在进行内存管理及垃圾收集时面临的问题还是有点与众不同。其中最主要的一个问题，就是分配给 Web 浏览器的可用内存数量通常要比分配给桌面应用程序的少。这样做的目的主要是出于安全方面的考虑， 目的是防止运行 JavaScript 的网页耗尽全部系统内存而导致系统崩溃。内存限制问题不仅会影响给变量 分配内存，同时还会影响调用栈以及在一个线程中能够同时执行的语句数量。</p><p>因此，确保占用最少的内存可以让页面获得更好的性能。而优化内存占用的最佳方式，就是为执行 中的代码只保存必要的数据。一旦数据不再有用，最好通过将其值设置为 null 来释放其引用——这个 做法叫做解除引用（dereferencing）。这一做法适用于大多数全局变量和全局对象的属性。局部变量会在 它们离开执行环境时自动被解除引用</p><h1 id="4-4小结"><a href="#4-4小结" class="headerlink" title="4.4小结"></a>4.4小结</h1><blockquote><ul><li>基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中；</li><li>从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本；</li><li>引用类型的值是对象，保存在堆内存中；</li><li>包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针；</li><li>从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同 一个对象；</li><li>确定一个值是哪种基本类型可以使用 typeof 操作符，而确定一个值是哪种引用类型可以使用 instanceof 操作符。</li></ul></blockquote><p>JavaScript 是一门具有自动垃圾收集机制的编程语言，开发人员不必关心内存分配和回收问题。可 以对 JavaScript 的垃圾收集例程作如下总结。</p><blockquote><ul><li>离开作用域的值将被自动标记为可以回收，因此将在垃圾收集期间被删除。</li><li>“标记清除”是目前主流的垃圾收集算法，这种算法的思想是给当前不使用的值加上标记，然 后再回收其内存。</li><li>另一种垃圾收集算法是“引用计数”，这种算法的思想是跟踪记录所有值被引用的次数。JavaScript 引擎目前都不再使用这种算法；但在 IE 中访问非原生 JavaScript 对象（如 DOM 元素）时，这种 算法仍然可能会导致问题。</li><li>当代码中存在循环引用现象时，“引用计数”算法就会导致问题。</li><li>解除变量的引用不仅有助于消除循环引用现象，而且对垃圾收集也有好处。为了确保有效地回 收内存，应该及时解除不再使用的全局对象、全局对象属性以及循环引用变量的引用。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级程序设计 </tag>
            
            <tag> JS基本概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS高级程序设计】第三章 基本概念</title>
      <link href="/passages/%E3%80%90JS%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%91%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/passages/%E3%80%90JS%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%91%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="3-1语法"><a href="#3-1语法" class="headerlink" title="3.1语法"></a>3.1语法</h1><ul><li><p>区分大小写</p></li><li><p>不能使用关键字/保留字</p></li><li><p>统一的命名规则</p><blockquote><p>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）；  其他字符可以是字母、下划线、美元符号或数字。 标识符中的字母也可以包含扩展的 ASCII 或 Unicode 字母字符（如 À 和 Æ），但我们不推荐这样做。</p><p><code>ECMAScript</code> 标识符采用<strong>驼峰大小写</strong>格式：</p><p>firstSecond myCar doSomethingImportant</p><p>虽然没有谁强制要求必须采用这种格式，但为了与 ECMAScript 内置的函数和对象命名格式保持一 致，可以将其当作一种最佳实践。<a id="more"></a></p></blockquote></li><li><p>注释：单行/多行注释  //  or  /* */</p></li><li><p>ECMAScript5 提出严格模式：’use strict’ , 也可在函数内部执行</p></li><li><p>语句：推荐语句用分号结束</p></li><li><p>变量：</p><pre><code class="js">//创建局部变量function test(){  var msg = &#39;1&#39;}alert(msg) //抛出错误//创建全局变量function test(){  msg = &#39;1&#39;}alert(msg) // 1</code></pre></li></ul><h1 id="3-4数据类型"><a href="#3-4数据类型" class="headerlink" title="3.4数据类型"></a>3.4数据类型</h1><ul><li>5种简单类型：Undefined、Null、Number、String、Boolean</li><li>一种复杂类型：Object</li></ul><h2 id="3-4-1-typeof操作符"><a href="#3-4-1-typeof操作符" class="headerlink" title="3.4.1 typeof操作符"></a>3.4.1 typeof操作符</h2><p>typeof负责检测数据类型，以下为数据检测返回值：</p><ul><li>“undefined” // 如果这个值未定义</li><li>“object” //如果这个值为对象或者Null</li><li>“number” //如果这个值为数值</li><li>“string” //如果这个值为字符串</li><li>“boolean” //如果这个值为true/false</li><li>“function” // 如果这个值为函数</li></ul><blockquote><p>typeof(msg) 注意， typeof 是一个操作符而不是函数，因此例子中的圆括号尽管可以使用，但不是必需的</p></blockquote><h2 id="3-4-2-Undefined类型"><a href="#3-4-2-Undefined类型" class="headerlink" title="3.4.2 Undefined类型"></a>3.4.2 Undefined类型</h2><blockquote><p>undefined 只有一个值就是undefined，在var进行声明未进行赋值的情况下，返回undefined。</p></blockquote><pre><code class="js">var msg ; // 等价与var msg = undefinedalert( msg === undefined) //truealert(age) //产生错误</code></pre><blockquote><p>用typeof检测数据类型时，已定义和未定义的都返回undefined</p></blockquote><pre><code class="js">var msg;console.log(msg) //undefinedconsole.log(age) //undefined</code></pre><h2 id="3-4-3-Null类型"><a href="#3-4-3-Null类型" class="headerlink" title="3.4.3 Null类型"></a>3.4.3 Null类型</h2><blockquote><p>Null 类型是第二个只有一个值的数据类型，这个特殊的值是 null。从逻辑角度来看，null 值表 示一个空对象指针，而这也正是使用 typeof 操作符检测 null 值时会返回”object”的原因</p></blockquote><p>Null类型只有一个值就是null，null对象表示一个空对象指针，在定义一个位置obj的时候就可以使用null进行预定义</p><pre><code class="js">var person = null;console.log(typeof person ) //object 通常用来定义一个空对象</code></pre><p>实际上，undefined 值是派生自 null 值的，因此 ECMA-262 规定对它们的相等性测试要返回 true：</p><pre><code class="js">null == undefined//实际上进行了转换Boolean(null) == Boolean(undefined)//true</code></pre><blockquote><p>null常用在初始化一个对象</p></blockquote><p> 只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存 null 值。这样做不仅可以 体现 null 作为空对象指针的惯例，而且也有助于进一步区分 null 和 undefined。</p><h2 id="3-4-4-Boolean类型"><a href="#3-4-4-Boolean类型" class="headerlink" title="3.4.4 Boolean类型"></a>3.4.4 Boolean类型</h2><p>值：true / false 区分大小写</p><p>所有类型都有一个boolean 的值，转换方式：</p><pre><code class="js">var msg = &#39;hello world&#39;var msgBoolean = Boolean(msg)</code></pre><p>所有值转换列表：</p><table><thead><tr><th align="center">数据类型</th><th align="center">转换为true的值</th><th align="center">数量</th></tr></thead><tbody><tr><td align="center">Boolean</td><td align="center">true</td><td align="center">5</td></tr><tr><td align="center">String</td><td align="center">任何非空字符串</td><td align="center">“” /空字符串</td></tr><tr><td align="center">Number</td><td align="center">任何非零数字值（包括无穷大）</td><td align="center">0和NaN</td></tr><tr><td align="center">Object</td><td align="center">任何对象</td><td align="center">null</td></tr><tr><td align="center">Undefined</td><td align="center">n/a（not applicable 的缩写“不适用”）</td><td align="center">undefined</td></tr></tbody></table><h2 id="3-4-5-Number类型"><a href="#3-4-5-Number类型" class="headerlink" title="3.4.5 Number类型"></a>3.4.5 Number类型</h2><ul><li><p>浮点数值</p><blockquote><p>由于保存浮点数值需要的内存空间是保存整数值的两倍，因此 ECMAScript 会不失时机地将浮点数值 转换为整数值。显然，如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。同样 地，如果浮点数值本身表示的就是一个整数（如 1.0），那么该值也会被转换为整数，如下面的例子所示：</p></blockquote><pre><code class="js">var floatNum1 = 1.; var floatNum2 = 10.0;// 小数点后面没有数字——解析为 1 // 整数——解析为 10//指数幂计数法：var count = 3.159e4 //31590//在默认情况下，ECMASctipt 会将那些小数点后面带有 6个 零以上的浮点数值转换为以 e 表示法表示的数值（例如，0.0000003 会被转换成 3e7）。console.log(0.1+0.2) //结果为 0.30000000000000004//永远不要做浮点数相加判断</code></pre></li><li><p>数值范围</p><blockquote><p>ECMAScript 能够表示的最小数值保 存在 Number.MIN_VALUE 中——在大多数浏览器中，这个值是 5e-324；能够表示的最大数值保存在 Number.MAX_VALUE 中——在大多数浏览器中，这个值是 1.7976931348623157e+308。如果某次计算的 结果得到了一个超出 JavaScript 数值范围的值，那么这个数值将被自动转换成特殊的 Infinity 值。具 体来说，如果这个数值是负数，则会被转换成-Infinity（负无穷），如果这个数值是正数，则会被转 换成 Infinity（正无穷）,</p><p>。要想确定一个数值是不是有穷的（换句话说，是不是位于最 小和最大的数值之间），可以使用 isFinite()函数。这个函数在参数位于最小与最大数值之间时会返 回 true，如下面的例子所示：</p></blockquote><pre><code class="js">var result = Number.MAX_VALUE + Number.MAX_VALUE;alert(isFinite(result)); //超出范围false</code></pre></li><li><p>NaN</p><blockquote><p>任何涉及NaN的操作都会返回<code>NaN</code>，NaN与自己不相等</p><p>检测一个值是否为NaN的函数： isNaN(); </p><p>任何涉及 NaN 的操作（例如 NaN/10）都会返回 NaN，</p></blockquote></li></ul><pre><code class="js">  0 / 0 // NaN  8 / 0 //Infinity</code></pre><pre><code class="js">  //使用isNaN()检测是否不是数值  console.log(isNaN(true)) // boolean true自动转换为1,是数字返回false  alert(isNaN(NaN));//true  alert(isNaN(10));//false（10 是一个数值）  alert(isNaN(&quot;10&quot;));//false（可以被转换成数值 10）  alert(isNaN(&quot;blue&quot;));//true（不能转换成数值）</code></pre><ul><li><p>数值转换</p><ul><li><p>Number()函数</p><ul><li>可转换所有类型</li><li>如果是boolean  true -&gt;1 / false -&gt;0 </li><li>数字，简单传入传出</li><li>null -&gt; 0</li><li>undefined -&gt; NaN（不是数字）</li><li>如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即”1” 会变成 1，”123”会变成 123，而”011”会变成 11（注意：前导的零被忽略了）</li><li>如果字符串中包含有效的浮点格式，如”1.1”，则将其转换为对应的浮点数值（同样，也会忽 略前导零）；</li><li>如果字符串中包含有效的十六进制格式， 例如 “0xf” ， 则将其转换为相同大小的十进制整 数值；</li><li>如果字符串是空的（不包含任何字符），则将其转换为 0；</li><li>如果字符串中包含除上述格式之外的字符，则将其转换为 NaN。</li><li>如果是对象，则调用对象的 valueOf()方法，然后依照前面的规则转换返回的值。如果转换 的结果是 NaN，则调用对象的 toString()方法，然后再次依照前面的规则转换返回的字符 串值。</li></ul><pre><code class="js">//示例Number(&#39;hello world&#39;) // NaNNumber(null) // 0Number(&quot;011&quot;) // 11Number(true) // 1Number(undefined) //NaN</code></pre></li><li><p>parseInt() 函数</p><p>由于 Number()函数在转换字符串时比较复杂而且不够合理，因此在处理整数的时候更常用的是 parseInt()函数。parseInt()函数在转换字符串时，更多的是看其是否符合数值模式。</p><p>parseInt()会替换掉空格，会忽略前导的0，如果字符串开头为字符则返回NaN。</p><pre><code class="js">parseInt(&quot;&quot;) //空字符串返回NaNparseInt(&quot;123abc&quot;) //123parseInt(&quot;abc123&quot;) //NaN</code></pre><blockquote><p>parseInt(‘’,进制)</p><p>接收一个进制，按照进制进行转换</p></blockquote></li><li><p>parseFloat()函数</p><p>只解析10进制的数字，忽略前导的0</p></li></ul></li></ul><h2 id="3-4-6-String类型"><a href="#3-4-6-String类型" class="headerlink" title="3.4.6 String类型"></a>3.4.6 String类型</h2><ul><li><p>字符串字面量</p><p>反斜杠表示转义字符</p><pre><code class="js">\n 换行\t 制表\b 空格\r 回车\f 进纸\\ 斜杠\&#39; 转义&#39;\&quot; 转义&quot;\xnn 以十六进制代码nn表示的一个字符（其中n为0～F）。例如，\x41表示&quot;A&quot;\unnnn 以十六进制代码nnnn表示的一个Unicode字符（其中n为0～F）。例如，\u03a3表示希腊字符Σ</code></pre></li><li><p>字符串的特点</p><blockquote><p>ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变 某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量， 例如：</p></blockquote><pre><code class="js">var lang = &quot;Java&quot;;lang = lang + &quot;Script&quot;;</code></pre></li><li><p>转换字符串</p><ul><li>toString()方法，可以接收一个参数─进制</li></ul><pre><code class="js">var age = 13;var ageAsString = age.toString(8); // 以8进制处理返回&quot;15&quot;</code></pre><blockquote><p>数值、布尔值、对象和字符串值（没错，每个字符串也都有一个 toString()方法，该方法返回字 符串的一个副本）都有 toString()方法。但 null 和 undefined 值没有这个方法。</p><ul><li>String() 方法</li></ul></blockquote><ul><li><p>如果值有 toString()方法，则调用该方法（没有参数）并返回相应的结果；</p></li><li><p>如果值是 null，则返回”null”；</p></li><li><p>如果值是 undefined，则返回”undefined”。</p><pre><code class="js">var value1 = 10;var value2 = true;var value3 = null;var value4 ;String(value1) // &quot;10&quot;String(value2) // &quot;true&quot;String(value3) // &quot;null&quot;String(value4) // &quot;undefined&quot;</code></pre></li></ul><ul><li><blockquote><p>要把某个值转换为字符串，可以使用加号操作符把它与一个字符 串（””）加在一起。</p></blockquote></li></ul></li></ul><h2 id="3-4-7-Object类型"><a href="#3-4-7-Object类型" class="headerlink" title="3.4.7 Object类型"></a>3.4.7 Object类型</h2><p>ECMAScript 中的对象其实就是一组数据和功能的集合。对象可以通过执行 new 操作符后跟要创建 的对象类型的名称来创建。而创建 Object 类型的实例并为其添加属性和（或）方法，就可以创建自定 义对象，</p><pre><code class="js">var obj = new Object(); </code></pre><p>Object 的每个实例都具有下列属性和方法。</p><ul><li>constructor：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor） 就是 Object()。 </li><li>hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中（而不是在实例 的原型中）是否存在。其中，作为参数的属性名（propertyName）必须以字符串形式指定（例 如：o.hasOwnProperty(“name”)）。 </li><li>isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型。</li><li>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用 for-in 语句来枚举。与 hasOwnProperty()方法一样，作为参数的属性名必须以字符串形式指定。 </li><li>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应。 </li><li>toString()：返回对象的字符串表示。 </li><li>valueOf() ：返回对象的字符串、数值或布尔值表示。 通常与 toString() 方法的返回值相同。</li></ul><h1 id="3-5-操作符"><a href="#3-5-操作符" class="headerlink" title="3.5 操作符"></a>3.5 操作符</h1><p>ECMA-262 描述了一组用于操作数据值的操作符，包括算术操作符（如加号和减号）、位操作符、 关系操作符和相等操作符。ECMAScript 操作符的与众不同之处在于，它们能够适用于很多值，例如字 符串、数字值、布尔值，甚至对象。不过，在应用于对象时，相应的操作符通常都会调用对象的 valueOf() 和（或）toString()方法，以便取得可以操作的值。</p><h2 id="3-5-1-一元操作符"><a href="#3-5-1-一元操作符" class="headerlink" title="3.5.1  一元操作符"></a>3.5.1  一元操作符</h2><p>只能操作一个值的操作符叫做一元操作符。一元操作符是 ECMAScript 中最简单的操作符。</p><ul><li><p>前置递增和递减操作</p><p>++ / – </p><pre><code class="js">++ age ;-- age;//执行前置递增和递减操作时，变量的值都是在语句被求值以前改变的。（在计算机科学领域，这种 情况通常被称作副效应。）var age = 29 ;var anotherAge = --age + 2;//输出 age 28 anotherAge 30 </code></pre></li></ul><p>//由于前置递增和递减操作与执行语句的优先级相等，因此整个语句会从左至右被求值<br>  var num1 = 2;<br>var num2 = 20;<br>  var num3 = –num1 + num2; //21<br>var num4 = num1 + num2; //21 </p><pre><code>  &gt;   加号/减号在前，先计算值，然后再计算表达式，值先增加/减少  &gt;  &gt;   加号/减号在后，先计算表达式，然后再计算值，值后增加/减少* 后置递增和递减操作  ```js  var num1 = 2  var num2 = 20  var total = num1 ++ +num2  // 22  num1  //3  var total = num1 -- +num2  // 23  num1 //2</code></pre><ul><li><p>在应用于不同的值时，递增和递减操作符遵循下列规则:</p><ol><li>在应用于一个包含有效数字字符的字符串时，先将其转换为数字值，再执行加减 1 的操作。字 符串变量变成数值变量。</li><li>在应用于一个不包含有效数字字符的字符串时，将变量的值设置为 NaN  字符串变量变成数值变量。</li><li>在应用于布尔值 false 时，先将其转换为 0 再执行加减 1 的操作。布尔值变量变成数值变量。</li><li>在应用于布尔值 true 时，先将其转换为 1 再执行加减 1 的操作。布尔值变量变成数值变量。</li><li>在应用于浮点数值时，执行加减 1 的操作。</li><li>在应用于对象时，先调用对象的 valueOf()方法以取得一个可供操作的 值。然后对该值应用前述规则。如果结果是 NaN，则在调用 toString()方法后再应用前述规 则。对象变量变成数值变量。</li></ol><p>市例:</p><pre><code class="js">var a = &quot;1&quot;a ++ // 1a //2typeof a  // numbervar b = &quot;str&quot; b ++ // NaNb //NaNtypeof b //numbervar c = falsec++ // 0c // 1typeof c // numbervar d = trued++ // 1d // 2typeof d //numbervar e = 1.1e ++ // 1.1e // 2.1typeof e // numbervar o = {  valueOf : function(){    return 1    }}o ++ // 1o // 2 typeof o // number</code></pre></li></ul><h2 id="3-5-2-位操作符"><a href="#3-5-2-位操作符" class="headerlink" title="3.5.2 位操作符"></a>3.5.2 位操作符</h2><p>对于有符号的整数，32 位中的前 31 位用于表示整数的值。第 32 位用于表示数值的符号：0 表示正 数，1 表示负数。这个表示符号的位叫做符号位，符号位的值决定了其他位数值的格式。其中，正数以 纯二进制格式存储，31 位中的每一位都表示 2 的幂。第一位（叫做位 0）表示 2 0 ，第二位表示 2 1 ，以此 类 推 。 没 有 用 到 的 位 以 0 填 充 ， 即 忽 略 不 计 。 例 如 ， 数 值 18 的 二 进 制 表 示 是 00000000000000000000000000010010，或者更简洁的 10010。这是 5 个有效位，这 5 位本身就决定了实 际的值</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdgqhv1ruij30gp07tmxq.jpg" alt="image-20200403180242625"></p><pre><code class="js">var num = -18num.toString(2) // &quot;-10010&quot;</code></pre><ul><li>按位非（NOT）</li></ul><blockquote><p>按位非操作符由一个波浪线（~）表示， 执行按位非的结果就是返回数值的反码</p></blockquote><ul><li>看不下去了，用到再补内容吧</li></ul><h2 id="3-5-3布尔操作符"><a href="#3-5-3布尔操作符" class="headerlink" title="3.5.3布尔操作符"></a>3.5.3布尔操作符</h2><p>布尔操作符一共有 3 个：非（NOT）、与（AND）和或（OR）</p><ul><li>逻辑非</li></ul><p>逻辑非操作符由一个叹号（！）表示，可以应用于 ECMAScript 中的任何值。无论这个值是什么数据 类型，这个操作符都会返回一个布尔值。逻辑非操作符首先会将它的操作数转换为一个布尔值，然后再 对其求反。也就是说，逻辑非操作符遵循下列规则：</p><blockquote><ul><li>如果操作数是一个对象，返回 false；<code>!{}//false</code></li><li>如果操作数是一个空字符串，返回 true；<code>!&quot;&quot;//true</code></li><li>如果操作数是一个非空字符串，返回 false； <code>!&quot;1&quot;//false</code></li><li>如果操作数是数值 0，返回 true；<code>!0 //true</code></li><li>如果操作数是任意非 0 数值（包括 Infinity），返回 false；<code>!2 //false !infinity //false</code></li><li>如果操作数是 null，返回 true； <code>!null //true</code></li><li>如果操作数是 NaN，返回 true； <code>!NaN //true</code></li><li>如果操作数是 undefined，返回 true。<code>!undefined //true</code></li></ul></blockquote><blockquote><p>  双 !! 实际作用与 Boolean() 函数相当</p></blockquote><ul><li><p>逻辑与（短路操作符）</p><p>逻辑与操作符由两个和号（&amp;&amp;）表示，有两个操作数</p><p><code>var result = true &amp;&amp; false;</code></p><blockquote><ul><li>如果第一个操作数是对象，则返回第二个操作数</li><li>如果第二个操作数是对象， 则只有在第一个操作数的求值结果为 true 的情况下才会返回该 对象</li><li>如果两个操作数都是对象，则返回第二个操作数；</li><li>如果有一个操作数是 null，则返回 null；</li><li>如果有一个操作数是 NaN，则返回 NaN；</li><li>如果有一个操作数是 undefined，则返回 undefined。</li></ul></blockquote><p>逻辑与操作属于短路操作，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值。 对于逻辑与操作而言，如果第一个操作数是 false，则无论第二个操作数是什么值，结果都不再可能是 true 了。</p><pre><code class="js">var found = true; var result = (found &amp;&amp; someUndefinedVariable); // 这里会发生错误alert(result); // 这一行不会执行</code></pre><p>在上面的代码中，当执行逻辑与操作时会发生错误，因为变量 someUndefinedVariable 没有声 明。由于变量 found 的值是 true，所以逻辑与操作符会继续对变量 someUndefinedVariable 求值。 但 someUndefinedVariable 尚未定义，因此就会导致错误。</p></li><li><p>逻辑或</p><p>逻辑或操作符由两个竖线符号（||）表示，有两个操作数</p><p><code>var result = true || false;</code></p><blockquote><ul><li>如果第一个操作数是对象，则返回第一个操作数；</li><li>如果第一个操作数的求值结果为 false，则返回第二个操作数</li><li>如果两个操作数都是对象，则返回第一个操作数</li><li>如果两个操作数都是 null，则返回 null</li><li>如果两个操作数都是 NaN，则返回 NaN；</li><li>如果两个操作数都是 undefined，则返回 undefined。</li></ul></blockquote><p>我们可以利用逻辑或的这一行为来避免为变量赋 null 或 undefined 值。</p><p><code>var a =value1 || value2</code></p><p>当value1 有值的时候赋值给a，如果value1 为false 则 赋值value2</p></li></ul><h2 id="3-5-4乘性操作符"><a href="#3-5-4乘性操作符" class="headerlink" title="3.5.4乘性操作符"></a>3.5.4乘性操作符</h2><p>ECMAScript 定义了 3 个乘性操作符：乘法、除法和求模。这些操作符与 Java、C 或者 Perl 中的相 应操作符用途类似，只不过在操作数为非数值的情况下会执行自动的类型转换。如果参与乘性计算的某 个操作数不是数值，后台会先使用 Number()转型函数将其转换为数值。也就是说，空字符串将被当作 0，布尔值 true 将被当作 1。</p><ol><li><p>乘法</p><p><code>var a = 35*20</code></p><blockquote><ul><li>如果操作数都是数值，执行常规的乘法计算，即两个正数或两个负数相乘的结果还是正数，而 如果只有一个操作数有符号，那么结果就是负数。如果乘积超过了 ECMAScript 数值的表示范围， 则返回 Infinity 或-Infinity；</li><li>如果有一个操作数是 NaN，则结果是 NaN；</li><li>如果是 Infinity 与 0 相乘，则结果是 NaN；</li><li>如果是 Infinity 与非 0 数值相乘，则结果是 Infinity 或-Infinity，取决于有符号操作数 的符号；</li><li>如果是 Infinity 与 Infinity 相乘，则结果是 Infinity</li><li>如果有一个操作数不是数值， 则在后台调用 Number() 将其转换为数值， 然后再应用上面的 规则</li></ul></blockquote></li><li><p>除法</p><blockquote><ul><li><p>如果操作数都是数值，执行常规的除法计算，即两个正数或两个负数相除的结果还是正数，而 如果只有一个操作数有符号，那么结果就是负数。如果商超过了 ECMAScript 数值的表示范围， 则返回 Infinity 或-Infinity；</p></li><li><p>如果有一个操作数是 NaN，则结果是 NaN；</p></li><li><p>如果是 Infinity 被 Infinity 除，则结果是 NaN</p></li><li><p>如果是零被零除，则结果是 NaN</p></li><li><p>如果是非零的有限数除以零，则结果是 Infinity 或-Infinity，取决于有符号操作数的符号</p></li><li><p>如果是 Infinity 被任何非零数值除，则结果是 Infinity 或-Infinity，取决于有符号操作</p></li><li><p>如果有一个操作数不是数值，则在后台调用 Number()将其转换为数值，然后再应用上面的规则</p><p><code>Infinity / 9  值为Infinity</code></p><p><code>9 / Infinity 值为0</code></p></li></ul></blockquote></li><li><p>求模</p><p>求模（余数）操作符由一个百分号（%）表示</p><p><code>var result = 26 % 5  //1</code></p></li></ol><h2 id="3-5-5-加性操作符"><a href="#3-5-5-加性操作符" class="headerlink" title="3.5.5 加性操作符"></a>3.5.5 加性操作符</h2><ol><li><p>加法（➕）</p><p>如果两个操作符都是数值，执行常规的加法计算，然后根据下列规则返回结果:</p><blockquote><ul><li>如果有一个操作数是 NaN，则结果是 NaN</li><li>如果是 Infinity 加-Infinity，则结果是 NaN</li><li>如果是 Infinity 加 Infinity，则结果是 Infinity</li><li>如果是 -Infinity 加 -Infinity，则结果是 -Infinity</li><li>如果是+0 加+0，则结果是+0</li><li>如果是-0 加-0，则结果是-0</li><li>如果是+0 加-0，则结果是+0</li></ul></blockquote><p>对于字符串来说：</p><blockquote><ul><li>如果两个操作数都是字符串，则将第二个操作数与第一个操作数拼接起来；</li><li>如果只有一个操作数是字符串， 则将另一个操作数转换为字符串， 然后再将两个字符串拼接起来</li></ul></blockquote><p>对于对象、数值、布尔值：</p><p>如果有一个操作数是对象、数值或布尔值，则调用它们的 toString()方法取得相应的字符串值， 然后再应用前面关于字符串的规则。对于 undefined 和 null，则分别调用 String()函数并取得字符 串”undefined”和”null”</p><p><code>var result = 5 + &#39;5&#39; //55</code></p></li><li><p>减法</p><p>（跳过）</p></li></ol><h2 id="3-5-6-关系操作符"><a href="#3-5-6-关系操作符" class="headerlink" title="3.5.6 关系操作符"></a>3.5.6 关系操作符</h2><p>小于（&lt;）、大于（&gt;）、小于等于（&lt;=）和大于等于（&gt;=）这几个关系操作符用于对两个值进行比 较，比较的规则与我们在数学课上所学的一样。这几个操作符都返回一个布尔值</p><blockquote><ul><li>如果两个操作数都是数值，则执行数值比较</li><li>如果两个操作数都是字符串，则比较两个字符串对应的<strong>字符编码值</strong></li><li>如果一个操作数是数值，则将另一个操作数转换为一个数值，然后执行数值比较</li><li>如果一个操作数是对象，则调用这个对象的 valueOf()方法，用得到的结果按照前面的规则执 行比较。如果对象没有 valueOf()方法，则调用 toString()方法，并用得到的结果根据前面 的规则执行比较</li><li>如果一个操作数是布尔值，则先将其转换为数值，然后再执行比较</li></ul></blockquote><p><code>var result = &quot;Brick&quot; &lt; &quot;alphabet&quot;;//true</code></p><p>在这个例子中，字符串”Brick”被认为小于字符串”alphabet”。原因是字母 B 的字符编码为 66， 而字母 a 的字符编码是 97。如果要真正按字母表顺序比较字符串，就必须把两个操作数转换为相同的大 小写形式（全部大写或全部小写），然后再执行比较，</p><p>另一种奇怪的现象发生在比较两个数字字符串的情况下：</p><p><code>var result = &quot;23&quot; &lt; &quot;3&quot;;</code> </p><p>结果为true</p><p>这是因为两个操作数都是字符串， 而字符串比较的是字符编码（”2”的字符编码是 50，而”3”的字符编码是 51）</p><p><code>var result = &quot;23&quot; &lt; 3;</code></p><p>结果为false 因为字符串23转换为了数值</p><p><code>var result = 3 &gt; &#39;a&#39;</code></p><p>结果为false 因为字符串a被转换成了 NaN，任何与NaN作比较都为false</p><p><code>var result = NaN &lt; 3</code>  //false</p><p><code>var result = NaN &gt;= 3</code> //false</p><p><code>var result = NaN == NaN</code> //false</p><h2 id="3-5-7-相等操作符"><a href="#3-5-7-相等操作符" class="headerlink" title="3.5.7 相等操作符"></a>3.5.7 相等操作符</h2><ol><li><p>相等和不相等</p><p>==   !=  这两个操作符 都会把值进行强制转换，然后再比较他们的相等性</p><p>遵循以下规则：</p><blockquote><ul><li><p>如果操作数有布尔值，则转换为数值，false转为0，true转为1</p></li><li><p>如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值</p></li><li><p>如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf()方法，用得到的基本类</p><p>型值按照前面的规则进行比较</p></li><li><p>null 和 undefined 是相等的</p></li><li><p>要比较相等性之前，不能将 null 和 undefined 转换成其他任何值</p></li><li><p>如果有一个操作数是 NaN，则相等操作符返回 false，而不相等操作符返回 true。重要提示：</p><p>即使两个操作数都是 NaN，相等操作符也返回 false；因为按照规则，NaN 不等于 NaN</p></li><li><p>如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，</p><p>则相等操作符返回 true；否则，返回 false</p></li></ul></blockquote></li><li><p>全等和不全等</p><p>除了在比较之前不转换操作数之外，全等和不全等操作符与相等和不相等操作符没有什么区别。全 等操作符由 3 个等于号（===）表示，它只在两个操作数<strong>未经转换就相等的情况下</strong>返回 true</p><p><code>55 === &#39;55&#39;</code> //false 因为是两个不同类型的值 一个是数值，一个是字符串</p><p><code>undefined == null</code> // true </p><p><code>undefined === null</code> //false 因为是不同类型的值，undefined值为undefined，null的值为null</p></li></ol><h2 id="3-5-8-条件操作符"><a href="#3-5-8-条件操作符" class="headerlink" title="3.5.8 条件操作符"></a>3.5.8 条件操作符</h2><p>三目运算符</p><p>var result = 条件1 ? 答案1 : 答案2</p><h2 id="3-5-9-赋值操作符"><a href="#3-5-9-赋值操作符" class="headerlink" title="3.5.9 赋值操作符"></a>3.5.9 赋值操作符</h2><p>基础： =</p><p>扩展：<code>*=</code> <code>+=</code> <code>-=</code> <code>%=</code> <code>/=</code></p><h2 id="3-5-10-逗号操作符"><a href="#3-5-10-逗号操作符" class="headerlink" title="3.5.10 逗号操作符"></a>3.5.10 逗号操作符</h2><p>使用逗号操作符可以在一条语句中执行多个操作</p><p><code>var num1=1, num2=2, num3=3;</code></p><p>逗号操作符多用于声明多个变量；但除此之外，逗号操作符还可以用于赋值。在用于赋值时，逗号 操作符总会返回表达式中的最后一项</p><p><code>var num = (5, 1, 4, 8, 0);</code> // num 的值为 0 取最后一项</p><h1 id="3-6语句"><a href="#3-6语句" class="headerlink" title="3.6语句"></a>3.6语句</h1><h2 id="3-6-1-if语句"><a href="#3-6-1-if语句" class="headerlink" title="3.6.1 if语句"></a>3.6.1 if语句</h2><p><code>if (condition) statement1 else statement2</code></p><h2 id="3-6-2-do-while-语句"><a href="#3-6-2-do-while-语句" class="headerlink" title="3.6.2 do-while 语句"></a>3.6.2 do-while 语句</h2><p>do-while 语句是一种后测试循环语句，即只有在循环体中的代码执行之后，才会测试出口条件。 换句话说，在对条件表达式求值之前，循环体内的代码至少会被执行一次。</p><pre><code class="js">do {statement} while (expression); //while里面的条件必须为true才能循环</code></pre><h2 id="3-6-3-while-语句"><a href="#3-6-3-while-语句" class="headerlink" title="3.6.3 while 语句"></a>3.6.3 while 语句</h2><p><code>while(expression) statement</code></p><h2 id="3-6-4-for-语句"><a href="#3-6-4-for-语句" class="headerlink" title="3.6.4 for 语句"></a>3.6.4 for 语句</h2><p><code>for (initialization; expression; post-loop-expression) statement</code></p><p>此外，for 语句中的初始化表达式、控制表达式和循环后表达式都是可选的。将这三个表达式全部 省略，就会创建一个无限循环</p><pre><code class="js">for (;;) { doSomething(); }// 无限循环 </code></pre><h2 id="3-6-5-for-in语句"><a href="#3-6-5-for-in语句" class="headerlink" title="3.6.5 for-in语句"></a>3.6.5 for-in语句</h2><p><code>for (property in expression) statement</code></p><h2 id="3-6-6-label-语句"><a href="#3-6-6-label-语句" class="headerlink" title="3.6.6 label 语句"></a>3.6.6 label 语句</h2><p>使用 label 语句可以在代码中添加标签，以便将来使用。</p><p><code>label: statement</code></p><pre><code class="js">start: for (var i=0; i &lt; count; i++) { alert(i); }//这个例子中定义的 start 标签可以在将来由 break 或 continue 语句引用。加标签的语句一般都 要与 for 语句等循环语句配合使用。let str = &quot;&quot;;loop1:for (let i = 0; i &lt; 5; i++) {  if (i === 1) {    continue loop1;  }  str = str + i;}console.log(str);// expected output: &quot;0234&quot;</code></pre><h2 id="3-6-7-break和continue语句"><a href="#3-6-7-break和continue语句" class="headerlink" title="3.6.7 break和continue语句"></a>3.6.7 break和continue语句</h2><p>break 和 continue 语句用于在循环中精确地控制代码的执行。其中，break 语句会立即退出循环， 强制继续执行循环后面的语句。而 continue 语句虽然也是立即退出循环，但退出循环后会从循环的顶 部继续执行。</p><p>break：跳出循环</p><p>continue：退出循环，从循环的顶部继续执行</p><blockquote><p>break 和 continue 语句都可以与 label 语句联合使用，从而返回代码中特定的位置。这种联合 使用的情况多发生在循环嵌套的情况下</p></blockquote><h2 id="3-6-8-with语句"><a href="#3-6-8-with语句" class="headerlink" title="3.6.8 with语句"></a>3.6.8 with语句</h2><p>with 语句的作用是将代码的作用域设置到一个特定的对象中</p><p><code>with (expression) statement;</code></p><p><strong>由于大量使用 with 语句会导致性能下降，同时也会给调试代码造成困难，因此 在开发大型应用程序时，不建议使用 with 语句</strong></p><h2 id="3-6-9-switch-语句"><a href="#3-6-9-switch-语句" class="headerlink" title="3.6.9 switch 语句"></a>3.6.9 switch 语句</h2><pre><code class="js">var a = 1switch(a){  case 1 :    //do something    break;  case 2 :    //do something     break;};//合并两种情形switch(a){  case 1:  case 2:    //命中1或者2时 需要执行的代码    break;  default:    //do something 默认不命中的时候执行}</code></pre><blockquote><p>switch 语句中的每一种情形（case）的含义是：“如果表达式等于这个值（value），则执行后面的 语句（statement）”。而 break 关键字会导致代码执行流跳出 switch 语句。如果省略 break 关键字， 就会导致执行完当前 case 后，继续执行下一个 case。最后的 default 关键字则用于在表达式不匹配前 面任何一种情形的时候，执行机动代码（因此，也相当于一个 else 语句）</p></blockquote><p><strong>switch 语句在比较值时使用的是全等操作符，因此不会发生类型转换（例如， 字符串”10”不等于数值 10）</strong></p><h1 id="3-7-函数"><a href="#3-7-函数" class="headerlink" title="3.7 函数"></a>3.7 函数</h1><p>函数对任何语言来说都是一个核心的概念。通过函数可以封装任意多条语句，而且可以在任何地方、 任何时候调用执行。ECMAScript 中的函数使用 function 关键字来声明，后跟一组参数以及函数体。</p><p><code>function functionName(arg0, arg1,...,argN) { statements }</code></p><pre><code class="js">function name(){  return //返回一个值  alert(&quot;test&quot;) //不会被执行，因为已经有返回值}//这个函数会在执行完 return 语句之后停止并立即退出。因此，位于 return 语句之后的任何代码 都永远不会执行。</code></pre><h2 id="3-7-1-理解函数"><a href="#3-7-1-理解函数" class="headerlink" title="3.7.1 理解函数"></a>3.7.1 理解函数</h2><p>ECMAScript 函数的参数与大多数其他语言中函数的参数有所不同。ECMAScript 函数不介意传递进 来多少个参数，也不在乎传进来参数是什么数据类型。也就是说，即便你定义的函数只接收两个参数， 在调用这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传递参数，而解析器永远不 会有什么怨言。之所以会这样，原因是 ECMAScript 中的参数在内部是用一个数组来表示的。函数接收 到的始终都是这个数组，而不关心数组中包含哪些参数（如果有参数的话）。如果这个数组中不包含任 何元素，无所谓；如果包含多个元素，也没有问题。实际上，在函数体内可以通过 arguments 对象来 访问这个参数数组，从而获取传递给函数的每一个参数。</p><p>关于 arguments 的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步。</p><pre><code class="js">function doAdd(num1, num2) { arguments[1] = 10; alert(arguments[0] + num2); }</code></pre><p>每次执行这个 doAdd()函数都会重写第二个参数，将第二个参数的值修改为 10。因为 arguments 对象中的值会自动反映到对应的命名参数，所以修改 arguments[1]，也就修改了 num2，结果它们的 值都会变成 10。不过，这并不是说读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但 它们的值会同步。另外还要记住，如果只传入了一个参数，那么为 arguments[1]设置的值不会反应到 命名参数中。这是因为 arguments 对象的长度是由传入的参数个数决定的，不是由定义函数时的命名 参数的个数决定的。</p><p>关于参数还要记住最后一点：没有传递值的命名参数将自动被赋予 undefined 值。这就跟定义了 变量但又没有初始化一样。 例如， 如果只给 doAdd() 函数传递了一个参数， 则 num2 中就会保存 undefined 值。</p><p>严格模式对如何使用 arguments 对象做出了一些限制。首先，像前面例子中那样的赋值会变得无 效。 也就是说， 即使把 arguments[1] 设置为 10 ， num2 的值仍然还是 undefined 。 其次， 重写 arguments 的值会导致语法错误（代码将不会执行）。</p><blockquote><p>ECMAScript 中的所有参数传递的都是值，不可能通过引用传递参数。</p></blockquote><h2 id="3-7-2-没有重载"><a href="#3-7-2-没有重载" class="headerlink" title="3.7.2 没有重载"></a>3.7.2 没有重载</h2><p>ECMAScript 函数不能像传统意义上那样实现重载。而在其他语言（如 Java）中，可以为一个函数 编写两个定义，只要这两个定义的签名（接受的参数的类型和数量）不同即可。如前所述，ECMAScirpt 函数没有签名，因为其参数是由包含零或多个值的数组来表示的。而没有函数签名，真正的重载是不可 能做到的。</p><p>如果在 ECMAScript 中定义了两个名字相同的函数，则该名字只属于后定义的函数</p><pre><code class="js">function addSomeNumber(num){ return num + 100; }function addSomeNumber(num) { return num + 200; }var result = addSomeNumber(100);//300</code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级程序设计 </tag>
            
            <tag> JS基本概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS高级程序设计】 第二章 使用JavaScript</title>
      <link href="/passages/%E3%80%90JS%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8JavaScript/"/>
      <url>/passages/%E3%80%90JS%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="2-1-“script”元素"><a href="#2-1-“script”元素" class="headerlink" title="2.1 “script”元素"></a>2.1 “script”元素</h1><p>向 HTML 页面中插入 JavaScript 的主要方法，就是使用&lt;/script&gt;元素。这个元素由 Netscape 创造 并在 Netscape Navigator 2 中首先实现。后来，这个元素被加入到正式的 HTML 规范中。HTML 4.01 为 &lt;/script&gt;定义了下列 6 个属性：<a id="more"></a></p><ul><li>async : 可选。表示应该立即下载脚本，但不应妨碍页面中的其他操作，比如下载其他资源或等待加载其他脚本。只对外部脚本文件有效。</li><li>charset：可选。表示通过 src 属性指定的代码的字符集。由于大多数浏览器会忽略它的值， 因此这个属性很少有人用。 </li><li>defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。IE7 及更早版本对嵌入脚本也支持这个属性。 </li><li>language：已废弃。原来用于表示编写代码使用的脚本语言（如 JavaScript、JavaScript1.2 或 VBScript）。大多数浏览器会忽略这个属性，因此也没有必要再用了。 </li><li>src：可选。表示包含要执行代码的外部文件。 </li><li>type：可选。可以看成是 language 的替代属性；表示编写代码使用的脚本语言的内容类型（也称为 MIME 类型）。虽然 text/javascript 和 text/ecmascript 都已经不被推荐使用，但人 们一直以来使用的都还是 text/javascript。实际上，服务器在传送 JavaScript 文件时使用的 MIME 类型通常是 application/x–javascript，但在 type 中设置这个值却可能导致脚本被 忽略。另外，在非IE浏览器中还可以使用以下值：application/javascript 和 application/ecmascript 。 考虑到约定俗成和最大限度的浏览器兼容性， 目前 type 属性的值依旧还是 text/javascript。不过，这个属性并不是必需的，如果没有指定这个属性，则其默认值仍为 text/javascript。</li></ul><p>##2.1.3 异步脚本</p><p>HTML5为script元素定义了async属性。同样与 defer 类似，async 只适用于外部脚本文件，并告诉浏览器立即下载文件。但与 defer 不同的是，标记为 async 的脚本并不保证按照指定它们的先后顺序执行。</p><pre><code class="html">&lt;!DOCTYPE html&gt; &lt;html&gt;  &lt;head&gt;     &lt;title&gt;Example HTML Page&lt;/title&gt;     &lt;script type=&quot;text/javascript&quot; async src=&quot;example1.js&quot;&gt;&lt;/script&gt;     &lt;script type=&quot;text/javascript&quot; async src=&quot;example2.js&quot;&gt;&lt;/script&gt;   &lt;/head&gt;   &lt;body&gt;     &lt;!-- 这里放内容 --&gt;   &lt;/body&gt; &lt;/html&gt;</code></pre><blockquote><p>第二个脚本可能会在第一个脚本之前执行，因此，需要确认两者没有相互的依赖关系。</p><p>指定 async 属性的目的是不让页面等待两个脚本下载和执行，从而异步加载页面其他内容。 为此，建议异步脚本不要在加载期间修改 DOM。</p><p>异步脚本一定会在页面的 load 事件前执行，但可能会在 DOMContentLoaded 事件触发之前或之 后执行。支持异步脚本的浏览器有 Firefox 3.6、Safari 5 和 Chrome。</p></blockquote><h1 id="2-2嵌入代码与维护性"><a href="#2-2嵌入代码与维护性" class="headerlink" title="2.2嵌入代码与维护性"></a><strong>2.2嵌入代码与维护性</strong></h1><p>在 HTML 中嵌入 JavaScript 代码虽然没有问题，但一般认为最好的做法还是尽可能使用外部文件来 包含 JavaScript 代码。不过，并不存在必须使用外部文件的硬性规定，但支持使用外部文件的人多会强 调如下优点。 </p><ul><li>可维护性：遍及不同 HTML 页面的 JavaScript 会造成维护问题。但把所有 JavaScript 文件都放在 一个文件夹中，维护起来就轻松多了。而且开发人员因此也能够在不触及 HTML 标记的情况下， 集中精力编辑 JavaScript 代码。 </li><li>可缓存：浏览器能够根据具体的设置缓存链接的所有外部 JavaScript 文件。也就是说，如果有两个 页面都使用同一个文件，那么这个文件只需下载一次。因此，最终结果就是能够加快页面加载的 速度。 </li><li>适应未来：通过外部文件来包含 JavaScript 无须使用前面提到 XHTML 或注释 hack。HTML 和 XHTML 包含外部文件的语法是相同的。</li></ul><p>#<strong>2.4&lt;\noscript&gt;元素</strong></p><p>noscript里面内容显示的前提条件：</p><ul><li>浏览器不支持脚本</li><li>支持脚本但是禁用</li></ul><pre><code class="js">//html页面&lt;noscript&gt;    &lt;p&gt;本页面需要浏览器支持（启用）JavaScript。 &lt;/noscript&gt;</code></pre><h1 id="2-5小结"><a href="#2-5小结" class="headerlink" title="2.5小结"></a><strong>2.5小结</strong></h1><p>把 JavaScript 插入到 HTML 页面中要使用&lt;/script&gt;元素。使用这个元素可以把 JavaScript 嵌入到 HTML 页面中，让脚本与标记混合在一起；也可以包含外部的 JavaScript 文件。而我们需要注意的地方有： </p><ul><li><p>在包含外部 JavaScript 文件时，必须将 src 属性设置为指向相应文件的 URL。而这个文件既可 以是与包含它的页面位于同一个服务器上的文件，也可以是其他任何域中的文件。 </p></li><li><p>所有&lt;/script&gt;元素都会按照它们在页面中出现的先后顺序依次被解析。 在不使用 defer 和 async 属性的情况下， 只有在解析完前面 &lt;/script&gt; 元素中的代码之后， 才会开始解析后面 &lt;/script&gt;元素中的代码。 </p></li><li><p>由于浏览器会先解析完不使用 defer 属性的&lt;/script&gt;元素中的代码，然后再解析后面的内容， 所以一般应该把&lt;/script&gt;元素放在页面最后，即主要内容后面，&lt;/body&gt;标签前面。 </p></li><li><p>使用 defer 属性可以让脚本在文档完全呈现之后再执行。延迟脚本总是按照指定它们的顺序执行。 </p></li><li><p>使用 async 属性可以表示当前脚本不必等待其他脚本，也不必阻塞文档呈现。<strong>不能保证异步脚本按照它们在页面中出现的顺序执行</strong>。 </p><blockquote><p>另外，使用&lt;\noscript&gt;元素可以指定在不支持脚本的浏览器中显示的替代内容。但在启用了脚本的情况下，浏览器不会显示&lt;\noscript&gt;元素中的任何内容。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级程序设计 </tag>
            
            <tag> 在HTML中使用JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 防火墙 启动/停止/重启/永久开启端口</title>
      <link href="/passages/CentOS-%E9%98%B2%E7%81%AB%E5%A2%99-%E5%90%AF%E5%8A%A8-%E5%81%9C%E6%AD%A2-%E9%87%8D%E5%90%AF-%E6%B0%B8%E4%B9%85%E5%BC%80%E5%90%AF%E7%AB%AF%E5%8F%A3/"/>
      <url>/passages/CentOS-%E9%98%B2%E7%81%AB%E5%A2%99-%E5%90%AF%E5%8A%A8-%E5%81%9C%E6%AD%A2-%E9%87%8D%E5%90%AF-%E6%B0%B8%E4%B9%85%E5%BC%80%E5%90%AF%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<pre><code class="bash"># &gt;&gt;&gt; 开启端口firewall-cmd --zone=public --add-port=8000/tcp --permanent#  命令含义：--zone #作用域--add-port=80/tcp #添加端口，格式为：端口/通讯协议--permanent #永久生效，没有此参数重启后失效# &gt;&gt;&gt; 重启防火墙firewall-cmd --reload                          ##重启防火墙firewall-cmd --state                           ##查看防火墙状态，是否是runningfirewall-cmd --reload                          ##重新载入配置，比如添加规则之后，需要执行此命令firewall-cmd --get-zones                       ##列出支持的zonefirewall-cmd --get-services                    ##列出支持的服务，在列表中的服务是放行的firewall-cmd --query-service ftp               ##查看ftp服务是否支持，返回yes或者nofirewall-cmd --add-service=ftp                 ##临时开放ftp服务firewall-cmd --add-service=ftp --permanent     ##永久开放ftp服务firewall-cmd --remove-service=ftp --permanent  ##永久移除ftp服务firewall-cmd --add-port=80/tcp --permanent     ##永久添加80端口 iptables -L -n                                 ##查看规则，这个命令是和iptables的相同的man firewall-cmd                               ##查看帮助</code></pre><a id="more"></a><pre><code class="bash"># &gt;&gt;&gt;  CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下# 1、直接关闭防火墙systemctl stop firewalld.service           #停止firewallsystemctl disable firewalld.service     #禁止firewall开机启动# 2、设置 iptables serviceyum -y install iptables-services# 如果要修改防火墙配置，如增加防火墙端口3306vi /etc/sysconfig/iptables # 增加规则-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT# 保存退出后systemctl restart iptables.service #重启防火墙使配置生效systemctl enable iptables.service #设置防火墙开机启动# 最后重启系统使设置生效即可。</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> 防火墙 </tag>
            
            <tag> 端口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript this</title>
      <link href="/passages/JavaScript-this/"/>
      <url>/passages/JavaScript-this/</url>
      
        <content type="html"><![CDATA[<h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><p>在浏览器环境中，当前的全局this为window对象 <a id="more"></a></p><pre><code class="js">this.document === document //truethis === window</code></pre><p>一般函数的this，指向的是当前全局对象</p><ul><li><p>在浏览器环境中，指向为window对象</p><pre><code class="js">function fn(){  return this}fn() === window //true</code></pre></li><li><p>在nodejs环境中，指向为global对象</p></li><li><p><strong>在严格模式中，指向为undefined</strong></p><pre><code class="js">function fn2(){  &#39;use strict&#39;;  return this;}fn2() === undefined</code></pre></li><li><p>作为对象方法的函数this</p><pre><code class="js">var o = {  props :37  f:function(){    return this.props  //此时this指向函数字面量o  }}var o = {  props : 37}function fn(){  return this.props;  //此时的this指向全局的window对象}//将函数作为对象的方法，可以获取到该对象o.f = fn;console.log(o.f()); //37</code></pre></li><li><p>对象原型链上的this</p><pre><code class="js">//this指向实例对象var o = {  f:function(){    return this.a + this.b  }}var obj = Object.create(o);obj.a = 2;obj.b = 1;obj.f(); // 3 </code></pre></li><li><p>get/set方法上的this</p><pre><code class="js">function modulus(){  return Math.sqrt(this.re * this.re + this.rm * this.rm)}var o = {  re : 2,  rm : 2,  get phase(){    return Math.atan2(this.rm,this.re)  }}Object.defineProperty(o,&#39;modulus&#39;,{  get: modulus,  enumerable:true,  configurable:true})console.log(o.phase,o.modulus) //都可以取到值</code></pre></li><li><p>构造函数上的this</p><pre><code class="js">function Person(){  this.age = &#39;24&#39;}var person1 = new Person(); //此时this指向到构造函数的prototype  此时Person.prototype.ageperson1.age // 24 此时this指向到实例对象的私有原型 __proto__ 可以直接拿到//如果函数有return 返回值，切返回值为一个对象并包含该属性，则返回该属性function Person(){  this.age = &#39;24&#39;  return {age:&#39;25&#39;}}var person2 = new Person();person2.age = 25</code></pre></li><li><p>call/apply方法与this</p><pre><code class="js">function add(c,d){  return this.a + this.b + c + d}var o = {  a:1,  b:2}add.call(o,3,4) //此时函数上下文this为o, 返回1+2+3+4add.apply(o,[3,4]) //返回1+2+3+4function bar(){  console.log(Object.prototype.toString.call(this))}bar.call(7) // [object number]</code></pre></li><li><p>bind方法与this</p><pre><code class="js">//bind 绑定 当前的thisfunction person(){  return this.a;}var g = person.bind({a:&quot;test&quot;})g() // test 通过bind绑定当前的this为一个对象var o = {  a:36,  f:peroson,  g:g}o.f() // 36o.g() // test 仍然按照绑定的来走</code></pre></li></ul><h3 id="call-apply-注意事项"><a href="#call-apply-注意事项" class="headerlink" title="call / apply 注意事项"></a>call / apply 注意事项</h3><pre><code class="js">function show(x,y){  console.log(x,y,this)}show.call(100,1,2) // 1,2,100show.apply(100,[3,4]) //3,4,100show.call(null) //undefined undefined window 此时this为全局变量windowshow.call(undefined) //undefined undefined window 此时this也指向全局变量window//严格模式下function show(x,y){  &#39;use strict&#39;  console.log(x,y,this)}show.call(null) //undefined undefined null.   undefined同理</code></pre><h3 id="bind方法注意事项"><a href="#bind方法注意事项" class="headerlink" title="bind方法注意事项"></a>bind方法注意事项</h3><pre><code class="js">this.x = 20;var module = {  x:30,  getX:function(){    return this.x  }}var getX = module.getX;getX() //20 赋值到变量的时候 此时this指向到全局window对象var boundGetX = getX.bind(module)boundGetX() // 30 绑定到module this指向module</code></pre><h3 id="bind与currying"><a href="#bind与currying" class="headerlink" title="bind与currying"></a>bind与currying</h3><pre><code class="js">//固定某些值，然后个性化改变某几个值function show(a,b,c){  return a + b + c}var show1 = show.bind(null,2)show1(1,2) // 2 + 1 + 2 固定a，bc个性化设置var show2 = show1.bind(null,3)show2(5) // 2+3+5 固定ab, c个性化设置//举例function getConfig(color,size,otheroptions){     console.log(color,size,otheroptions)}var defineConfig = getConfig(null,&#39;#ffffff&#39;,&#39;1024*768&#39;) //固定两个参数defineConfig(&#39;show&#39;) // &#39;#ffffff&#39;,&#39;1024*768&#39;,showdefineConfig(&#39;hide&#39;) //&#39;#ffffff&#39;,&#39;1024*768&#39;,hide</code></pre><h3 id="bind与new"><a href="#bind与new" class="headerlink" title="bind与new"></a>bind与new</h3><pre><code class="js">function foo(){  this.b = 100   return this.a}var foo1 = foo.bind({a:20})foo1() //20new foo() // {b:100} 整个函数作为返回值返回，作为构造函数扔掉返回值，bind作用会被忽略</code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> this指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 函数</title>
      <link href="/passages/JavaScript-%E5%87%BD%E6%95%B0/"/>
      <url>/passages/JavaScript-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="函数概念"><a href="#函数概念" class="headerlink" title="函数概念"></a>函数概念</h3><blockquote><p>函数是一块 JavaScript代码,被定义一次,但可执行和调用多次。JS中的函数也是对象,所以JS函数可以像其它对象那样操作和传递，所以我们也常叫JS中的函数为函数对象。<a id="more"></a></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7sbbngkr6j30v60hqn2q.jpg" alt="image-20191009222228763"></p><h3 id="函数创建方法"><a href="#函数创建方法" class="headerlink" title="函数创建方法"></a>函数创建方法</h3><ul><li><p>函数声明</p><pre><code class="js">function func(){  //do something}</code></pre></li><li><p>函数表达式</p><pre><code class="js">var func = function(){} //传入匿名函数</code></pre></li><li><p>使用构造函数</p><pre><code class="js">var func = new Function(&#39;参数1&#39;,&#39;参数2&#39;,&#39;函数内部块&#39;);//等价于var func = Function() ; </code></pre></li></ul><h3 id="不同创建方法，会有不同差别"><a href="#不同创建方法，会有不同差别" class="headerlink" title="不同创建方法，会有不同差别"></a>不同创建方法，会有不同差别</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7sci643lzj30z20lqq9p.jpg" alt="image-20191009230317799"></p><pre><code class="js">//函数声明与函数表达式进行对比var result = add(1,2) ;console.log(result) //输出3function add(a,b){  return a+b}//等价于function add(a,b){  return a+b}var result = add(1,2) ;console.log(result) //输出3</code></pre><blockquote><p>使用函数声明，可以进行函数提升，执行上下文之前，函数声明会提升到前面，可以直接进行调用</p></blockquote><pre><code class="js">var result = add(1,2)console.log(result) //报错,Uncaught TypeError: add is not a functionvar add = function(a,b){  return a+b}//等价于var add; //此时add刚刚被定义，值为undefinedvar result = add(1,2);console.log(result) add = function(a,b){  return a+b}</code></pre><blockquote><p>使用函数表达式创建函数，仅仅会把当前的变量进行提升，并不能对内部的匿名函数进行提升。</p></blockquote><pre><code class="js">var result = add(1,2)console.log(result) //报错,Uncaught TypeError: add is not a functionvar add = new Function(&#39;a&#39;,&#39;b&#39;,&#39;return a+b&#39;);//示例var globalTime = 3;(function(){  var time = 2;  var getTime = Function(&#39;return time&#39;) //undefined，无法访问到函数内部变量，却可以访问到全局变量（globalTime）})</code></pre><blockquote><p>使用函数构造器构造函数时，函数也不会进行提升，不能访问到函数内部变量，可以访问全局变量。</p></blockquote><h3 id="函数属性与arguments"><a href="#函数属性与arguments" class="headerlink" title="函数属性与arguments"></a>函数属性与arguments</h3><pre><code class="js">function foo(x,y,z){  arguments.length //实际传入两个形参 那么长度就是2  arguments[0] //返回1  arguments[0]=10   x //打印为10 （严格模式下赋值会失败）  arguments[2] = 20   z //打印为20  arguments.callee === foo //arguments下的callee属性指向函数本身（严格模式下不能使用）}foo(1,2)foo.length // 函数的形参3个，所以长度为3foo.name //名称foo</code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>在函数作用域外，仍然能通过一种形式访问到函数内部的局部变量。</p><pre><code class="js">function caller(){  var abc = 111;  return abc}caller() ; // 111 此时只有调用函数的时候才能获取到abc的值function caller(){  var abc = 111;   return function(){      return abc;    }}var func = caller();func(); //可以获取到内部变量abc</code></pre><blockquote><p>闭包可以进行封装，灵活方便。但是容易造成空间浪费，内存泄漏，性能消耗等问题。</p></blockquote><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li><p>全局变量</p><pre><code class="js">var i = 0;function func(){  console.log(i)}func(); // 0for(var j = 1 ; j&lt;6;j++){}console.log(j) // 1</code></pre></li><li><p>局部变量</p><pre><code class="js">function foo(){  var i = 0;}console.log(i) //undefined//特殊例子function foo1(){  var i = 0 ;  var foo2 = new Function(&#39;console.log(i)&#39;);  foo2()}foo1() ; // undefined</code></pre></li><li><p>eval() 内部声明的变量</p></li></ul><h3 id="利用函数作用域封装"><a href="#利用函数作用域封装" class="headerlink" title="利用函数作用域封装"></a>利用函数作用域封装</h3><pre><code class="js">(function(){})()//or!function(){}() //变成函数表达式</code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 数组</title>
      <link href="/passages/JavaScript-%E6%95%B0%E7%BB%84/"/>
      <url>/passages/JavaScript-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><blockquote><p>数组是特殊的Object，包含很多方法，创建数组的方法有很多：</p></blockquote><pre><code class="js">//数组的创建var arr  = new Array(100) //创建一个长度为100的数组,所有的值都为undefinedvar arr1 = new Array(&#39;1&#39;,&#39;2&#39;,true) //创建一个包含数值和固定下标的字符串var arr2 = [] //快捷创建一个数组 </code></pre><h3 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h3><blockquote><p>获取所有的数组方法: Array.prototype   所有在原型链上的方法 <a id="more"></a></p></blockquote><ul><li><p>john 方法  将数组转换为字符串</p><pre><code class="js">var arr = [1,2,3]arr.join(&#39;/&#39;) //输出&quot;1/2/3“var arr1 = [1,2,3,undefined];arr.join(&#39;&#39;) //输出&quot;123&quot;忽略 undefined//利用join创建一个重复输出的函数function repeatString(str,n){  return new Array(n+1).join(str) //创建一个n长度的数组，然后join连接符得以重复}</code></pre></li><li><p>reverse方法 将数组顺序颠倒</p><pre><code class="js">var arr = [1,2,3]arr.reverse() //输出[3,2,1] 会修改原数组</code></pre></li><li><p>sort方法 将数组排序</p><pre><code class="js">var arr = [15,22,17,58]arr.sort(); // 15,17,22,58var arr1 = [13,24,3,58]arr1.sort(); // 13,24,3,58 并没有按照实际的数字大小进行排序，因为sort方法先将其转换为字符串然后进行排序，解决方法：var arr1 = [13,24,3,58];arr1.sort(function(a,b){return a-b }) //根据大小排列var items = [  { name: &#39;Edward&#39;, value: 21 },  { name: &#39;Sharpe&#39;, value: 37 },  { name: &#39;And&#39;, value: 45 },  { name: &#39;The&#39;, value: -12 },  { name: &#39;Magnetic&#39; },  { name: &#39;Zeros&#39;, value: 37 }];// 根据值的大小排列items.sort(function (a, b) {  return (a.value - b.value)});</code></pre></li><li><p>concat方法 连接返回一个数组</p><pre><code class="js">var arr = [1,2,3]arr.concat(1) // [1,2,3,1]arr.concat([10,11],12) // [1,2,3,10,11,12]拉平数组一次arr.concat([10,11,[12,13]]) // [1,2,3,10,11,[12,13]] 只能拉平数组一次不能多次拉平</code></pre></li><li><p>slice方法 返回部分数组</p><pre><code class="js">var arr = [1,2,3,4,5]arr.slice(1,3) //返回[2,3] 不包含结束的那个字符arr.slice(1) //[2,3,4,5]arr.slice(1,-1) //[2,3,4] 从索引位置到最后一个的索引 不包含最后一个字符arr.slice(-4,-3) // [2]</code></pre></li><li><p>splice方法 数组精简、指定位置增加</p><pre><code class="js">var arr = [1,2,3,4,5]arr.splice(1,1)arr //[1,3,4,5] 从第二个字符开始删除一个arr.splice(2,2)arr //[1,2,5] 从第三个字符上开始删除两个arr.splice(1,1,&#39;a&#39;,&#39;b&#39;) arr //[1,&#39;a&#39;,&#39;b&#39;,3,4,5] //从第二个索引删除一个，然后插入后续的值</code></pre></li><li><p>ES5 方法：forEach方法，遍历数组  并不会修改当前数组</p><pre><code class="js">var arr = [1,2,3,4,5]arr.forEach(function(x,index,a){  //三个参数：x数组的值，index数组的索引，a数组本体  console.log(x+&#39;|&#39;+index+&#39;|&#39;+ (a === arr) ) })</code></pre></li><li><p>ES5方法：map方法，遍历并返回一个数组</p><pre><code class="js">var arr = [1,2,3,4,5]var arr1 = arr.map(function(x){  return x * 2})arr1 //[2,4,6,8,10]var kvArray = [{key: 1, value: 10}, {key: 2, value: 20}, {key: 3, value: 30}];var newKeyValueArray = kvArray.map(function(obj){  var sObj = {};  sObj[obj.key] = obj.value  return sObj})newKeyValueArray //[{1:10},{2:20},{3:30}]</code></pre></li><li><p>ES5方法：filter方法，接受一个callback，返回一个过滤的数组</p><pre><code class="js">var arr = [1,2,3,4,5];arr.filter(function(x,index){ //接受两个参数x为值，index为索引  return index % 3 === 0 || index &gt; 1})  // [4]</code></pre></li><li><p>ES5方法：every方法，对数组进行判断，全部符合返回一个boolean数值</p></li><li><p>ES5方法：some方法，对数组进行判断，符合一个则返回boolean数值</p><pre><code class="js">//every方法var arr = [1,2,3,4,5];arr.every(function(x){  return x &lt; 10 }) //true 因为全部小于10arr.every(function(x){  return x &gt; 6}) //false 因为没有大于6的//some方法arr.some(function(x){  return x === 3}) //true 因为数组里面存在3arr.some(function(x){  return x &lt;2}) //true 因为1小于2</code></pre></li><li><p>ES5方法：reduce方法，对数组相邻的值进行操作</p><pre><code class="js">//reducevar arr = [1,2,3,4,5]arr.reduce(function(x,y){ //此时x、y为1、2 第一个参数为索引1的值，第二个参数为索引2的值  return x+y},1) //此时1先作为x，与数组内数字相加，然后从左到右进行累加reduceRight //顺序改变从右往左</code></pre></li><li><p>ES5方法：indexOf / lastIndexOf方法，查找数组是否存在该值，如果存在返回当前索引位置，如果没有则返回-1</p><pre><code class="js">var arr = [1,2,3,2,1]arr.indexOf(1) //返回索引为0arr.indexOf(1,2) //从第三个位置开始查找，返回索引为4arr.indexOf(1,-2) //从倒数第二的位置（2）开始查找，返回索引为4arr.lastIndexOf(3,-4) //从右往左找，从倒数第四个开始（2），返回索引为2</code></pre></li></ul><h3 id="判断是否为数组"><a href="#判断是否为数组" class="headerlink" title="判断是否为数组"></a>判断是否为数组</h3><ul><li>Array.isArray(obj)</li><li>obj instanceof Array; //是否是数组实例</li><li>({}).toString.apply([]) === “[object Array]” //true  调用对象的toString方法</li><li>[].constructor === Array //true 利用构造函数判断</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 重要知识点</title>
      <link href="/passages/JavaScript-%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/passages/JavaScript-%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><a id="more"></a><pre><code class="js">//赋值var i = (1,2,3) // i = 3 逗号计算，返回最右var obj = {x:1,x:2} // obj.x -&gt; 2 ,可以重复命名但返回最后一个//try catch finallytry{  console.error(&#39;error1&#39;)}catch(err){  console.log(err)}finally{  console.log(&#39;finally&#39;)}//顺序 抛出错误-&gt; 捕捉错误error1 -&gt;finallytry{  try{    console.error(&quot;error2&quot;)  }catch(err){    console.log(err)  }finally{    console.log(&#39;finally2&#39;)  }}catch(err){  console.log(&quot;outer&quot;,err)}finally{  console.log(&#39;finally3&#39;)}//顺序 抛出错误error2 -&gt; 捕捉错误error2 -&gt; finally2 -&gt; outer（接收不到err 已经在上个catch捕捉） -&gt; finally3 //删除对象var person = {age:23,name:&quot;perter&quot;}delete person.age // truedelete person[&#39;name&#39;] //trueperson.age // undefineddelete person.age //true  ！依然返回true但是并不执行var descriptor = Object.getOwnPropertyDescriptor(Object,&#39;prototype&#39;);descriptor // 获取当前对象的描述属性 -&gt; 读写、配置、枚举//var 、 function 定义的属性不能被删除var age = 23delete age //falsefunction test(){}delete test //false(function test(){  var local = 1;  return delete local //false})(function(){  function test(){}  return delete test //false})//隐式变量定义oh = 1 delete oh //true//隐式创建类似于在window对象上添加属性window.oh //1 delete oh == delete window.oheval(&#39;var i = 1&#39;);delete i //true//属性检测var cat = new Object();cat.legs = 4;cat.name =&#39;kitty&#39;&#39;legs&#39; in cat // true&#39;name&#39; in cat //true&#39;toString&#39; in cat // in 往上找，一直找到Object.prototype -&gt; null cat.hasOwnProperty(&#39;legs&#39;) //truecat.hasOwnProperty(&#39;toString&#39;) //false 因为只是继承原型链上的方法，并不是其对象内部的方法//用当前存在的对象创建新变量var existObj = {x:1,y:2,z:3}var newObj = Object.create(existObj);newObj.x //1 如果仅仅想枚举当前对象上的属性var keyfor(key in newObj){  if(newObj.hasOwnProperty(key)){    console.log(key) //屏蔽继承原型链上的属性，仅枚举当前对象上的属性。  }}//可/不可枚举var cat = new Object();Object.defineProperty(cat,&#39;legs&#39;,{enumerable:false,value:4});cat.x = 1;cat.y=2;cat.z=3;var key;for(key in cat){  console.log(key) //x,y,z 不包含legs 因为legs不能被枚举 }Object.defineProperty(cat,&#39;legs&#39;,{enumerable:true})for(var key in cat){  console.log(key) //legs x , y ,z 可以进行枚举}//get/set方法var man = {  name:&#39;chenyu&#39;,  get age(){    return new Date().getFullYear() - 1995  },  set age(val){     console.log(&quot;can&#39;t set age&quot; + val)  }}</code></pre><h3 id="GET-SET-与原型链"><a href="#GET-SET-与原型链" class="headerlink" title="GET/SET 与原型链"></a>GET/SET 与原型链</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g72b87kb3dj312i0jljzn.jpg" alt="image-20190917103431722"></p><pre><code class="js">obj.z //向上查找原型链上的z，在构造函数foo上寻找到z obj.z = 10 //原型链上有get/set方法，赋值时会调用，并不在对象内部创建属性，所以该赋值操作不能被执行，因为无法操作原型链上的方法。//如何在实例对象上定义z属性？Object.defineProperty(obj,&#39;z&#39;,{value:1,configurable:true})obj.z //返回1 在实例对象中查找到z为1delete obj.z ;obj.z //10</code></pre><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7c35nyd07j31ol0u07wh.jpg" alt="image-20190925213036042"></p><blockquote><p>创建对象o  定义o的属性x 为1，默认定义为不可写,</p><p>创建实例对象 var obj = Object.create(o)    继承o的原型链</p><p>实例对象上还是无法修改x 对象，因为x在原型链上为不可写状态</p><p>在当前实例对象上再次定义x，并且writable为true，当前obj.x 可都可写</p></blockquote><pre><code class="js">Object.keys(obj) //获取obj的所有键 返回为数组Object.values(obj) //获取obj的所有数值 返回为数组</code></pre><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7c3yhmoz3j31l70u07wh.jpg" alt="image-20190925215819463"></p><pre><code class="js">//定义多个属性var o = {}var obj = Object.create(o)Object.defineProperties(obj,{  name:{value:&#39;chen&#39;,enmuerable:true},  age:{value:24,enmuerable:true},  salary:{value:7000,enmuerable:true,writable:true},  luck:{    get:function(){      return Math.random() &gt; 0.5 ? &quot;good&quot; : &quot;bad&quot;    }  },  promote:{    set:function(level){      this.salary *= 1 + level * 0.1    }  }})obj.salary // 7000obj.promote = 1 obj.salary // 7700</code></pre><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7c48uythvj31ja0u0kjl.jpg" alt="image-20190925220810577"></p><pre><code class="js">//对象是否可扩展Object.isExtensible(obj) //判断obj是否是可扩展属性Object.preventExtensions(obj) //让obj变得不可扩展Object.seal(obj) //让obj属性变得不可扩展 并且configurable为falseObject.isSealed(obj) //判断obj是否密封Object.freeze(obj) //冻结obj 不可扩展 configurable和writable为falseObject.isFrozen(obj) //判断是否被冻结以上不能改变原型链中的属性</code></pre><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7cwluudslj31pd0u0e0u.jpg" alt="image-20190926142952364"></p><pre><code class="js">//序列化JSON.stringify(obj) //转换为字符串JSON.parse(obj) // 将字符串转换为JavaScript对象</code></pre><blockquote><p>注意以下几点会异常序列化</p></blockquote><ul><li>val: undefined  //当值为undefined的时候，不进行序列化转换</li><li>a: NaN   //值为NaN的时候，直接转换为null</li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7cwsd3ufej31gy0rsjz1.jpg" alt="image-20190926143607763"></p><pre><code class="js">//自定义o序列化的过程var obj = {  o:{    o1 : 1,    o2 : 2,    toJSON:function(){  //toJSON函数名称固定，当序列化的时候执行这个函数，返回一个值      return this.o1 + this.o2    }  }}JSON.stringify(obj.o) // o:3</code></pre><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7d98mvv87j31ha0qsans.jpg" alt=""></p><pre><code class="js">//对象的toString方法对象的toString方法可以自己定义返回的字符串当与字符串拼接时，自动转换为字符串类型当做运算的时，转换为数字。</code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS 常用破解软件</title>
      <link href="/passages/MacOS-%E5%B8%B8%E7%94%A8%E7%A0%B4%E8%A7%A3%E8%BD%AF%E4%BB%B6/"/>
      <url>/passages/MacOS-%E5%B8%B8%E7%94%A8%E7%A0%B4%E8%A7%A3%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>列表更新事件：2019-08-20</p><p>软件来源：<a href="https://yun.naodai.org/Software/">https://yun.naodai.org/Software/</a></p><p><a href="https://xclient.info/">https://xclient.info/</a></p><p><a href="http://www.macbed.com/">http://www.macbed.com/</a> <a id="more"></a></p></blockquote><h3 id="1、PDF-Expert"><a href="#1、PDF-Expert" class="headerlink" title="1、PDF Expert"></a>1、PDF Expert</h3><p>轻松在MAC上完成PDF编辑、阅读、批注、编辑文本、添加照片、填写表单、签署合同、合并PDF文档以及加密保护，只需轻轻点击几下即可，前所未有的体验。</p><p><img src="https://s2.ax1x.com/2019/08/17/mKakqg.jpg" alt="PDF Expert"></p><blockquote><p>版本号：2.4.23</p><p>链接：<a href="https://yun.naodai.org/Software/PDF_Expert/PDF%20Expert%202.4.23.zip">立即下载</a></p></blockquote><h3 id="2、CleanMyMac-X"><a href="#2、CleanMyMac-X" class="headerlink" title="2、CleanMyMac X"></a>2、CleanMyMac X</h3><p>Mac OS X 系统下知名清理软件 CleanMyMac，这种垃圾清理类的软件似乎始终无法上架 Mac App Store，CleanMyMac 3 的宣传力度似乎并不如CleanMyMac 2，想当年 CleanMyMac 2 在MacPaw 网站上得倒计时挂了很久。这次，CleanMyMac 3 作为在 OS X Yosemite 系统下的软件，视觉风格上自然要满足扁平化和简约的设计路线。当然，版本号大升级，也需要拿出一点诚意，增加一些新功能。CleanMyMac 3 优化了清理体验，将复杂的操作和内容隐藏的更好，实际的操作流畅性更好一些。</p><p><img src="https://i.loli.net/2019/08/20/g6hcQuD8To94RN7.jpg" alt="9.jpg"></p><blockquote><p>版本号：4.4.6</p><p>链接：<a href="https://yun.naodai.org/Software/CleanMyMac/CleanMyMac_X_4.4.6.dmg">立即下载</a></p></blockquote><h3 id="3、Adobe-Zii-Adobe系列软件激活工具"><a href="#3、Adobe-Zii-Adobe系列软件激活工具" class="headerlink" title="3、Adobe Zii Adobe系列软件激活工具"></a>3、Adobe Zii Adobe系列软件激活工具</h3><p>步骤：</p><p>1、下载creative cloud 安装正版Adobe软件</p><p>2、退出所有Adobe系列软件</p><p>3、运行Zii，点击patch，即可激活</p><p><img src="https://i.loli.net/2019/08/20/CkUihxws6ag3MdD.png" alt="image-20190820122143153.png"></p><blockquote><p>版本号：4.4.2 </p><p>链接：<a href="https://xclient.pipipan.com/fs/13114864-393402681">网盘地址</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS 常用软件 </tag>
            
            <tag> TNT 破解版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS获取子节点、父节点和兄弟节点的若干种方式</title>
      <link href="/passages/JS%E8%8E%B7%E5%8F%96%E5%AD%90%E8%8A%82%E7%82%B9%E3%80%81%E7%88%B6%E8%8A%82%E7%82%B9%E5%92%8C%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9%E7%9A%84%E8%8B%A5%E5%B9%B2%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/passages/JS%E8%8E%B7%E5%8F%96%E5%AD%90%E8%8A%82%E7%82%B9%E3%80%81%E7%88%B6%E8%8A%82%E7%82%B9%E5%92%8C%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9%E7%9A%84%E8%8B%A5%E5%B9%B2%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://blog.csdn.net/laok_/article/details/75760572">https://blog.csdn.net/laok_/article/details/75760572</a></p></blockquote><h3 id="一、js获取子节点的方式"><a href="#一、js获取子节点的方式" class="headerlink" title="一、js获取子节点的方式"></a>一、js获取子节点的方式</h3><h4 id="1-通过获取dom方式直接获取子节点"><a href="#1-通过获取dom方式直接获取子节点" class="headerlink" title="1.通过获取dom方式直接获取子节点"></a>1.通过获取dom方式直接获取子节点</h4><p>其中test的父标签id的值，div为标签的名字。getElementsByTagName是一个方法。返回的是一个数组。在访问的时候要按数组的形式访问。<a id="more"></a></p><pre><code class="js">var a = document.getElementById(&quot;test&quot;).getElementsByTagName(&quot;div&quot;);</code></pre><h4 id="2-通过childNodes获取子节点"><a href="#2-通过childNodes获取子节点" class="headerlink" title="2.通过childNodes获取子节点"></a>2.通过childNodes获取子节点</h4><p>使用childNodes获取子节点的时候，childNodes返回的是子节点的集合，是一个数组的格式。他会把换行和空格也当成是节点信息。</p><pre><code class="js">var b =document.getElementById(&quot;test&quot;).childNodes;//为了不显示不必须的换行的空格，我们如果要使用childNodes就必须进行必要的过滤。通过正则表达式式取掉不必要的信息。//去掉换行的空格for(var i=0; i&lt;b.length;i++){    if(b[i].nodeName == &quot;#text&quot; &amp;&amp; !/\s/.test(b.nodeValue)){        document.getElementById(&quot;test&quot;).removeChild(b[i]);    }}//打印测试for(var i=0;i&lt;b.length;i++){    console.log(i+&quot;---------&quot;)    console.log(b[i]);}//补充 document.getElementById(&quot;test&quot;).childElementCount;  可以直接获取长度 同length</code></pre><h4 id="3-通过children来获取子节点"><a href="#3-通过children来获取子节点" class="headerlink" title="3.通过children来获取子节点"></a>3.通过children来获取子节点</h4><pre><code class="js">var getFirstChild = document.getElementById(&quot;test&quot;).children[0];</code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
            <tag> DOM节点操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生 JavaScript 的 DOM 操作汇总</title>
      <link href="/passages/%E5%8E%9F%E7%94%9F-JavaScript-%E7%9A%84-DOM-%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
      <url>/passages/%E5%8E%9F%E7%94%9F-JavaScript-%E7%9A%84-DOM-%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    原文链接：<a href="https://harttle.land/2015/10/01/javascript-dom-api.html">https://harttle.land/2015/10/01/javascript-dom-api.html</a></p></blockquote><p>经常有人讲在 IDE 中写 C#、Java 会越来越手残，那么经常用 jQuery 也会让我们忘记 JavaScript 是如何操作 DOM 的。 JavaScript的DOM操作也是面试中的常见问题，尤其是当你需要回答jQuery的性能问题时，便需要再次回到JavaScript DOM API。</p><a id="more"></a><h2 id="什么是-DOM？"><a href="#什么是-DOM？" class="headerlink" title="什么是 DOM？"></a>什么是 DOM？</h2><p>外行看来前端工程师的工作就是改页面（HTML、CSS），写脚本（JavaScript）。当你意识到你不是在改HTML而是在操作DOM时，你就升级了！ 那么什么是DOM？</p><blockquote><p>MDN: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction">文档对象模型 (DOM)</a> 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。简言之，它会将web页面和脚本或程序语言连接起来。</p></blockquote><p><strong>说白了 DOM 就是浏览器为 JavaScript 提供的一系列接口（通过 window.documnet 提供的），通过这些接口我们可以操作web页面。</strong> 但DOM并不是编程语言，它是文档对象的模型，该模型是独立于编程语言的。比如我们在Python中也可以操作DOM：</p><pre><code class="python">import xml.dom.minidom as mdoc = m.parse(&quot;C:\\Projects\\Py\\chap1.xml&quot;);doc.nodeName # DOM property of document object;p_list = doc.getElementsByTagName(&quot;para&quot;);</code></pre><p>所以Web前端常讲的DOM API (web 或 XML 页面) = DOM + JS (脚本语言)</p><h2 id="DOM-创建"><a href="#DOM-创建" class="headerlink" title="DOM 创建"></a>DOM 创建</h2><p><strong>DOM节点（Node）</strong>通常对应于一个标签，一个文本，或者一个HTML属性。DOM节点有一个<code>nodeType</code>属性用来表示当前元素的类型，它是一个整数：</p><ol><li>Element，元素</li><li>Attribute，属性</li><li>Text，文本</li></ol><p>DOM节点创建最常用的便是<a href="http://www.w3school.com.cn/xmldom/met_document_createelement.asp">document.createElement</a>和<code>document.createTextNode</code>方法：</p><pre><code class="js">var el1 = document.createElement(&#39;div&#39;);var el2 = document.createElement(&#39;input&#39;);var node = document.createTextNode(&#39;hello world!&#39;);</code></pre><h2 id="DOM-查询"><a href="#DOM-查询" class="headerlink" title="DOM 查询"></a>DOM 查询</h2><p>元素查询的API返回的的结果是DOM节点或者DOM节点的列表。<code>document</code>提供了两种Query方法：</p><pre><code class="js">// 返回当前文档中第一个类名为 &quot;myclass&quot; 的元素var el = document.querySelector(&quot;.myclass&quot;);// 返回一个文档中所有的class为&quot;note&quot;或者 &quot;alert&quot;的div元素var els = document.querySelectorAll(&quot;div.note, div.alert&quot;);// 获取元素var el = document.getElementById(&#39;xxx&#39;);var els = document.getElementsByClassName(&#39;highlight&#39;);var els = document.getElementsByTagName(&#39;td&#39;);</code></pre><p>Element也提供了很多相对于元素的DOM导航方法：</p><pre><code class="js">// 获取父元素、父节点var parent = ele.parentElement;var parent = ele.parentNode;// 获取子节点，子节点可以是任何一种节点，可以通过nodeType来判断var nodes = ele.children;    // 查询子元素var els = ele.getElementsByTagName(&#39;td&#39;);var els = ele.getElementsByClassName(&#39;highlight&#39;);// 当前元素的第一个/最后一个子元素节点var el = ele.firstElementChild;var el = ele.lastElementChild;// 下一个/上一个兄弟元素节点var el = ele.nextElementSibling;var el = ele.previousElementSibling;</code></pre><h2 id="DOM-更改"><a href="#DOM-更改" class="headerlink" title="DOM 更改"></a>DOM 更改</h2><pre><code class="js">// 添加、删除子元素ele.appendChild(el);ele.removeChild(el);// 替换子元素ele.replaceChild(el1, el2);// 插入子元素parentElement.insertBefore(newElement, referenceElement);</code></pre><h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><pre><code class="js">// 获取一个{name, value}的数组var attrs = el.attributes;// 获取、设置属性var c = el.getAttribute(&#39;class&#39;);el.setAttribute(&#39;class&#39;, &#39;highlight&#39;);// 判断、移除属性el.hasAttribute(&#39;class&#39;);el.removeAttribute(&#39;class&#39;);// 是否有属性设置el.hasAttributes();     </code></pre><h2 id="常见的面试问题"><a href="#常见的面试问题" class="headerlink" title="常见的面试问题"></a>常见的面试问题</h2><h3 id="innerHTML-与-outerHTML-的区别？"><a href="#innerHTML-与-outerHTML-的区别？" class="headerlink" title="innerHTML 与 outerHTML 的区别？"></a>innerHTML 与 outerHTML 的区别？</h3><p>DOM 元素的 <code>innerHTML</code>, <code>outerHTML</code>, <code>innerText</code>, <code>outerText</code> 属性的区别也经常被面试官问到， 比如对于这样一个HTML元素：<code>&lt;div&gt;content&lt;br/&gt;&lt;/div&gt;</code>。</p><ul><li><code>innerHTML</code>：内部HTML，<code>content&lt;br/&gt;</code>；</li><li><code>outerHTML</code>：外部HTML，<code>&lt;div&gt;content&lt;br/&gt;&lt;/div&gt;</code>；</li><li><code>innerText</code>：内部文本，<code>content</code>；</li><li><code>outerText</code>：内部文本，<code>content</code>；</li></ul><p>上述四个属性不仅可以读取，还可以赋值。<code>outerText</code> 和 <code>innerText</code> 的区别在于 <code>outerText</code> 赋值时会把标签一起赋值掉，另外 <code>xxText</code> 赋值时HTML特殊字符会被转义。 下图来源于：<a href="http://walsh.iteye.com/blog/261966">http://walsh.iteye.com/blog/261966</a></p><p><img src="https://harttle.land/assets/img/blog/javascript/dom-content.gif" alt="DOM content"></p><h3 id="jQuery的html-与innerHTML的区别？"><a href="#jQuery的html-与innerHTML的区别？" class="headerlink" title="jQuery的html()与innerHTML的区别？"></a>jQuery的html()与innerHTML的区别？</h3><p>jQuery的 <code>.html()</code> 会调用<code>.innerHTML</code>来操作，但是会捕获异常，然后用 <code>.empty()</code>, <code>.append()</code> 重新操作。 这是因为IE8中有些元素的 <code>.innerHTML</code> 是只读的。见：<a href="http://stackoverflow.com/questions/3563107/jquery-html-vs-innerhtml">http://stackoverflow.com/questions/3563107/jquery-html-vs-innerhtml</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
            <tag> DOM操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 动态创建标记</title>
      <link href="/passages/JavaScript-%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E6%A0%87%E8%AE%B0/"/>
      <url>/passages/JavaScript-%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E6%A0%87%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="传统创建标记方法"><a href="#传统创建标记方法" class="headerlink" title="传统创建标记方法"></a>传统创建标记方法</h3><ul><li><p>document.write方法</p></li><li><p>innerHTML属性</p></li></ul><h3 id="DOM方法"><a href="#DOM方法" class="headerlink" title="DOM方法"></a>DOM方法</h3><ul><li><p>createElement 方法</p><blockquote><p>创建元素节点方法：document.createElement(nodeName)</p></blockquote><pre><code class="js">//创建一个p元素var para = document.createElement(&#39;p&#39;);//此时p元素是文档碎片(document fragment)游离在文档之外</code></pre></li><li><p>appendChild方法</p><blockquote><p>添加到某元素的节点树</p><p>parent.appendChild(child)<a id="more"></a></p></blockquote><pre><code class="js">//创建一个p元素var para = document.createElement(&#39;p&#39;);var testdiv = document.getELementById(&quot;testdiv&quot;);//添加p元素到testdiv,成为testdiv的一个子元素节点testdiv.appendChild(para);</code></pre></li><li><p>createTextNode方法</p><blockquote><p>创建一个文本节点</p><p>document.createTextNode(“txt”)</p></blockquote><pre><code class="js">//创建一个文本节点var text = document.createTextNode(&quot;hello world&quot;);//创建一个p元素var para = document.createElement(&#39;p&#39;);//添加文本节点到元素节点para.appendChild(text);</code></pre></li><li><p>Example：创建复杂的示例</p><pre><code class="js">//创建 &lt;p&gt; this is &lt;em&gt;my&lt;/em&gt; content. &lt;/p&gt;var para = document.createElement(&quot;p&quot;);var txt1 = document.createTextNode(&quot;this is&quot;);para.appendChild(txt1)var em = document.createElement(&#39;em&#39;);var txt2 = document.createTextNode(&#39;my&#39;);em.appendChild(txt2)var txt3 = document.createTextNode(&#39;content.&#39;);para.appendChild(em)para.appendChild(txt3)</code></pre></li><li><p>获取body元素</p><pre><code class="js">//方法1document.getElementsByTagName(&#39;body&#39;)[0]//方法2document.body</code></pre></li><li><p>在已有元素前插入一个新元素</p><blockquote><p>insertBefore()方法</p><p>新元素newElement，目标元素targetElement，父元素parentElement（目标元素的父元素）</p></blockquote><pre><code class="js">parenetElement.insertBefore(newElement,targetElement)==targetElement.parentNode.indsertBefore(newElement,targetElement)//在父元素内在目标元素前插入// &lt;div id=&#39;demoParent&#39;&gt; &lt;span id=&#39;demoChild&#39;&gt; &lt;/span&gt; &lt;/div&gt;var obj = document.createElement(&#39;p&#39;);var demoChild = document.getELmentById(&quot;demoChild&quot;);var demoParent = document.getELementById(&quot;demoParent&quot;);demoParent.insertBefore(obj,demoChild) == demoChild.parentNode.insertBefore(obj,demoChild)</code></pre></li><li><p>在现有的元素后插入一个新元素（DOM未提供）</p><blockquote><p>自制函数insertBefore()</p></blockquote><pre><code class="js">function insertBefore(new,target){  var parent = target.parentNode;  if(parent.lastChild == target){    parent.appendChild(new)  }else{    //目标元素的下一个兄弟元素 target.nextSibling       parent.appendChild(new,target.nextSibling);      }}</code></pre></li></ul><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="*Ajax"></a>*Ajax</h3><p>异步加载页面内容，无需刷新页面</p><h4 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a>XMLHttpRequest 对象</h4><p>Ajax技术的核心就是XMLHttpRequest对象。这个对象充当着浏览器中的脚本(客户端)与服<br>务器之间的中间人的角色。以往的请求都由浏览器发出,而 JavaScript通过这个对象可以自己发<br>送请求,同时也自己处理响应。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript-dom-编程艺术 </tag>
            
            <tag> HTML标记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 图片库改进</title>
      <link href="/passages/JavaScript-%E5%9B%BE%E7%89%87%E5%BA%93%E6%94%B9%E8%BF%9B/"/>
      <url>/passages/JavaScript-%E5%9B%BE%E7%89%87%E5%BA%93%E6%94%B9%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<h3 id="平隐退化"><a href="#平隐退化" class="headerlink" title="平隐退化"></a>平隐退化</h3><blockquote><p>在没有javascript支持的情况下，是否网页会出现错误？</p></blockquote><h3 id="JavaScript和HTML分离"><a href="#JavaScript和HTML分离" class="headerlink" title="JavaScript和HTML分离"></a>JavaScript和HTML分离</h3><blockquote><p>剥离页面元素与用户的逻辑操作，提供页面挂钩 <a id="more"></a></p></blockquote><h3 id="Fn-prepareGallery"><a href="#Fn-prepareGallery" class="headerlink" title="Fn-prepareGallery"></a>Fn-prepareGallery</h3><blockquote><p>现在,需要编写一个简短的函数把有关操作关联到onc1ick事件上我将其命名为 prepareGallery。</p><p>下面是我想让这个函数完成的工作。<br>口检查当前浏览器是否理解 getElementsBy TagName<br>囗检査当前浏览器是否理解 getelementById。<br>口检查当前网页是否存在一个d为 imagegal lery的元素。<br>口遍历 imagegallery元素中的所有链接。<br>口设置 onclick事件,让它在有关链接被点击时完成以下操作:<br>    ■把这个链接作为参数传递给 showPic函数;<br>    ■取消链接被点击时的默认行为,不让浏览器打开这个链接</p></blockquote><pre><code class="js">function preparGallery(){  //检查是否支持get  if(!document.getElementsByTagName || !document.getElementById){    return false  }  var imgGallery = document.getELementById(&quot;gallery&quot;);  if(!imgGallery){    console.log(&#39;浏览器不支持获取id，请启用JavaScript&#39;)    return false  }else{    var aContent = imgGallery.getElementsByTagName(&#39;a&#39;);    for(var i in aContent){      if(aContent[i].href){        this.click = function(e){          e.preventDefault();          showPic(this)          return false        }      }    }  }}//启用事件window.onload = function(){  //fn1  //fn2  ...  //fn[n]}//快速添加页面onload事件  function addEventAfterOnload(func){    var wonload = window.onload    if(typeof window.onload != &#39;function&#39;){      window.onload = func;    }else{      window.onload = function(){        wonload();        func();      }    }  }  addEventAfterOnload(func1)</code></pre><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><pre><code class="js">var result = condition ? result1 : result2 ;//结果为true返回result1</code></pre><h3 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h3><blockquote><p>element.nodeName 返回值为大写字母</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript-dom-编程艺术 </tag>
            
            <tag> 图片库改进 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-最佳实践</title>
      <link href="/passages/JavaScript-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/passages/JavaScript-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript相对独立"><a href="#JavaScript相对独立" class="headerlink" title="JavaScript相对独立"></a>JavaScript相对独立</h3><blockquote><p>与HIML语言相比, JavaScript语言的生存环境的要求要苛刻得多。如果 JavaScript代码不符合语法规定, JavaScript解释器(对Web应用而言就是浏览器)将拒绝执行它们并报错;而浏览器在遇到不符合语法规定的HTML代码时,则会千方百计地将其呈现出来。尽管如此,在如今的Web上还是充斥着质量低劣的 JavaScript代码<a id="more"></a> </p></blockquote><h3 id="JavaScript伪协议"><a href="#JavaScript伪协议" class="headerlink" title="JavaScript伪协议"></a>JavaScript伪协议</h3><blockquote><p>“javascript:” 这个伪协议可以让我们通过一个链接来调用JavaScript函数</p></blockquote><pre><code class="js">&lt;a href=&quot;javascript:popUp()&quot;&gt;示例&lt;/a&gt;</code></pre><h3 id="内嵌的事件处理函数"><a href="#内嵌的事件处理函数" class="headerlink" title="内嵌的事件处理函数"></a>内嵌的事件处理函数</h3><pre><code class="js">&lt;a href=&quot;#&quot; onclick=&quot;popup()&quot;&gt; &lt;/a&gt;</code></pre><h3 id="分离JavaScript"><a href="#分离JavaScript" class="headerlink" title="分离JavaScript"></a>分离JavaScript</h3><pre><code class="js">&lt;a href=&#39;#&#39; class=&quot;popup&quot;&gt; &lt;/a&gt;//包装在函数里 利用window.onload 加载页面全部的节点window.onload = choose();function choose(){var popup_class = document.getELementsByClassName(&#39;popup&#39;);for(var i in popup_class){  if(popup_class[i].className = &#39;popup&#39;){    this.click = function(){      //statement    }  }}  }</code></pre><h3 id="性能考虑"><a href="#性能考虑" class="headerlink" title="性能考虑"></a>性能考虑</h3><ul><li><p>尽量少访问DOM 尽量减少标记</p><blockquote><p>对获取来的DOM进行存储，防止二次获取</p></blockquote></li><li><p>合理放置脚本，脚本合并，减少http请求</p></li><li><p>压缩脚本，双版本，原版，.min.js版本</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript-dom-编程艺术 </tag>
            
            <tag> 最佳实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-图片库</title>
      <link href="/passages/JavaScript-%E5%9B%BE%E7%89%87%E5%BA%93/"/>
      <url>/passages/JavaScript-%E5%9B%BE%E7%89%87%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="第四章：JavaScript-图片交互"><a href="#第四章：JavaScript-图片交互" class="headerlink" title="第四章：JavaScript 图片交互"></a>第四章：JavaScript 图片交互</h2><pre><code class="html">&lt;ul&gt;    &lt;li&gt;&lt;a href=&quot;images/3840x2160-3122452-creative-wallpapers.jpg&quot; onclick=&quot;showpic(this);return false;&quot;&gt;1&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;images/3840x2160-3374593-free-dusk-wallpapers.jpg&quot; onclick=&quot;showpic(this);return false;&quot;&gt;2&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;images/3840x2160-3957507-photos-wallpapers.jpg&quot;&gt;3&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;images/3840x2160-4279191-stunning-retina-wallpapers.jpg&quot;&gt;4&lt;/a&gt;&lt;/li&gt;  &lt;/ul&gt;//占位符  &lt;img src=&quot;images/3840x2160-3122452-creative-wallpapers.jpg&quot; alt=&quot;&quot; id=&quot;placeholder&quot;&gt;</code></pre><a id="more"></a><pre><code class="js">function showpic(whichpic){  var imgPlaceholder = document.getElementById(&quot;placeholder&quot;);  var nodeSource = whichpic.href;  imgPlaceholder.src = nodeSource;}//控制图片href</code></pre><ul><li><p>childNodes 属性  //获取一个元素的所有子元素</p><blockquote><p>由 childnodes属性返回的数组包含所有类型的节点,而不仅仅是元素节点。事实上,文档里几乎每一样东西都是一个节点,甚至连空格和换行符都会被解释为节点,而它们也全都包含在childNodes属性所返回的数组当中。</p></blockquote><pre><code class="js">var body_ele = document.getElementsByTagName(&#39;body&#39;)[0];var body_all_child = body_ele.childNodes;//获取全部body 下面的子元素//text元素、ul、img、script等</code></pre></li><li><p>nodeType属性 //获取元素 节点的属性</p><pre><code class="js">body_ele.nodeType;//返回值1:元素节点，2:属性节点，3:文本节点</code></pre></li><li><p>nodeValue 属性 //获取节点的值</p><pre><code class="js">var para = document.getElementById(&quot;paragraph&quot;);console.log(para.nodeValue) //返回值为null//para元素本身的nodeValue属性是空值//para元素包含很多子元素console.log(para.childNodes[0].nodeValue)//childNodes 获取当前元素的所有元素信息，第一个是元素的文本信息节点，第二个是元素下挂载的其他元素</code></pre></li><li><p>firstChild和lastChild 属性</p><pre><code class="js">node.firstChild = node.childNodes[0];node.lastChild = node.childNodes[node.childNodes.length-1]</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript-dom-编程艺术 </tag>
            
            <tag> 图片库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-DOM</title>
      <link href="/passages/JavaScript-DOM/"/>
      <url>/passages/JavaScript-DOM/</url>
      
        <content type="html"><![CDATA[<h2 id="第三章-DOM"><a href="#第三章-DOM" class="headerlink" title="第三章 DOM"></a>第三章 DOM</h2><ul><li>document 文档</li><li>object 对象</li><li>model 模型</li><li>统称为文档对象模型 <a id="more"></a></li></ul><h3 id="节点（node）"><a href="#节点（node）" class="headerlink" title="节点（node）"></a>节点（node）</h3><ul><li><p>元素节点（element node） // div  ul  li a</p></li><li><p>文本节点 （text node） // 标签内容</p></li><li><p>属性节点（attribute）//标签的属性值  href</p></li><li><p>CSS</p><ul><li>id</li><li>class</li></ul></li><li><p>获取元素</p><ul><li><p>getElementById  //通过id取得</p><blockquote><p>document对象特有的函数</p></blockquote></li><li><p>getElementsByTagName  //通过表签名取得</p><blockquote><p>获取到的是一个数组，可遍历，可使用Array对象中的默认属性</p></blockquote><pre><code class="js">//获取全部标签 通配符*document.getElementsByTagName(&quot;*&quot;)//返回所有文档节点obj//获取指定标签内所有的标签var shop = document.getElementById(&quot;shop&quot;);var allItems = shop.getElementsByTagName(&quot;*&quot;);</code></pre></li><li><p>getElementsByClassName //通过class属性获得 HTML5新增</p><pre><code class="js">document.getElementsByClassName(&quot;classname&quot;)//返回是数组 类似于tagnamedocument.getElementsByClassName(&quot;classname1 classname2&quot;)//获取多个classname的标签//获取指定id下所有特定class标签var id = document.getElementById(&quot;id&quot;);var innerClass = id.getElementsByClassName(&quot;classname&quot;);//适应老浏览器做法    function getElementsByClassName(node,classname){      if(node.getElementsByClassName){        return node.getElementsByClassName(classname);      }else{        var results = [];        var allNode = document.getElementsByTagName(&#39;*&#39;);        for(var i in allNode){          if(allNode[i].className.indexOf(classname) != -1){            results[i] = allNode[i];          }        }        return results;      }    }    //替换为    var id = document.getElementById(&quot;id&quot;);    var innerClass = getElementsByClassName(id，&quot;classname&quot;);</code></pre></li></ul></li></ul><h3 id="获取和设置属性"><a href="#获取和设置属性" class="headerlink" title="获取和设置属性"></a>获取和设置属性</h3><blockquote><p>获取元素以后，我们可以获取和设置这些元素的属性</p></blockquote><ul><li><p>获取属性值  obj.getAttribute(属性名)  //不能通过document对象调用，只能通过元素节点调用</p><pre><code class="js">//获取所有p标签的title属性var paras = document.getElementsByTagName(&#39;p&#39;);var result = [];for(var i in paras){  result[i] = paras[i].getAttribute(&#39;title&#39;);}</code></pre></li><li><p>设置属性值 obj.setAttribute(“属性名”，”属性值”)</p><pre><code class="js">var para = document.getElementById(&quot;par&quot;);para.setAttribute(&quot;title&quot;,&quot;我是标题&quot;)</code></pre><blockquote><p>这里有一个非常值得关注的细节:通过 setAttribute对文档做出修改后,在通过浏览器的view source(查看源代码)选项去查看文档的源代码时看到的仍将是改变前的属性值,也就是说,setAttribute做出的修改不会反映在文档本身的源代码里。这种“表里不一”的现象源自DOM的工作模式:先加载文档的静态内容,再动态刷新,动态刷新不影响文档的静态内容。这正是DOM的真正威力:对页面内容进行刷新却不需要在浏览器里刷新页面。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript-dom-编程艺术 </tag>
            
            <tag> DOM文档对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS 常用快捷键</title>
      <link href="/passages/MacOS-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/passages/MacOS-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="快捷键是提高效率的捷径"><a href="#快捷键是提高效率的捷径" class="headerlink" title="快捷键是提高效率的捷径"></a>快捷键是提高效率的捷径</h2><p>不管使用哪一个 App 或者操作系统，掌握快捷键永远提高效率最简单的方法。就像它的名字”shortcuts”一样，它的设计就是为了让你节省时间的捷径。</p><p>macOS 系统自带许多有用的快捷键，有全局的也有各个 App 自己的。Mac App 的特色是 Menubar 上的菜单如果是重要操作一般都会带有匹配的快捷键，而且实现起来非常简单。所以 macOS 生态里的快捷键非常统一。用户只需要学习一套快捷键操作，就可以复制到其他 App 里面。<a id="more"></a></p><p>大部分使用 macOS 的读者朋友应该都习惯了相当一部的快捷键，但可能还有些有用的快捷键没有用到。我在写作此文的时候也发现有些快捷键之前都不知道，整理的过程也是我学习的过程。</p><p>本文整理 macOS 几个大类的快捷键，希望能对读者朋友们有所帮助。更多主流 App 快捷键大家随时可以通过 Google 关键字: App Name + Shortcuts 或者是 App Name + Cheatsheat 来找到。</p><h2 id="一、系统全局类"><a href="#一、系统全局类" class="headerlink" title="一、系统全局类"></a>一、系统全局类</h2><p>系统自带的快捷键有一部分可以从 System Preferences -&gt; Keyboard -&gt; Shortcuts 里面找到</p><p>这里我们介绍几个比较常用到的全局快捷键:</p><table><thead><tr><th><strong>Key</strong></th><th><strong>Action</strong></th></tr></thead><tbody><tr><td>cmd + tab</td><td>在已经打开的 App 之间进行切换，按住 shift 可以反向选择</td></tr><tr><td>ctrl + left/right</td><td>左右切换 Workspace</td></tr><tr><td>ctrl + up</td><td>显示 Mission Control</td></tr><tr><td>ctrl + down</td><td>显示当前 App 所有 Windows</td></tr><tr><td>option + cmd + l</td><td>在 Finder 打开 Downloads 目录</td></tr><tr><td>option + cmd + d</td><td>显示/隐藏 Dock</td></tr><tr><td>option + cmd + esc</td><td>打开 Force Quit App 列表</td></tr><tr><td>shift + option + cmd + esc</td><td>直接 Force Quit 当前 App</td></tr></tbody></table><h2 id="二、窗口类"><a href="#二、窗口类" class="headerlink" title="二、窗口类"></a>二、窗口类</h2><table><thead><tr><th><strong>Key</strong></th><th><strong>Action</strong></th></tr></thead><tbody><tr><td>cmd + `</td><td>在当前 App 的多个窗口直接切换</td></tr><tr><td>cmd + m</td><td>最小化当前窗口</td></tr><tr><td>cmd + h</td><td>隐藏当前 App</td></tr><tr><td>cmd + opt + h</td><td>隐藏除了当前 App 以外的所有窗口</td></tr><tr><td>cmd + ctrl + f</td><td>进入/退出最大化</td></tr><tr><td>cmd + w</td><td>关掉当前窗口或者当前 Tab</td></tr><tr><td>cmd + opt + w</td><td>关掉当前 App 的所有窗口</td></tr></tbody></table><h2 id="三、文本编辑操作"><a href="#三、文本编辑操作" class="headerlink" title="三、文本编辑操作"></a>三、文本编辑操作</h2><p>对于开发者或者文字工作者，每天都在敲键盘打开，能够不用鼠标就完成选择文本、替换文本之类的操作是最好的。以下是文本编辑常用的快捷键:</p><table><thead><tr><th><strong>Key</strong></th><th><strong>Action</strong></th></tr></thead><tbody><tr><td>ctrl + a</td><td>跳到当前行的最前面</td></tr><tr><td>ctrl + e</td><td>跳到当前行的最后面</td></tr><tr><td>cmd + left/right</td><td>跳转到当前行的开头/结尾</td></tr><tr><td>cmd + up/down</td><td>跳转到当前文档的最顶部或最底部</td></tr><tr><td>cmd + del</td><td>删掉当前光标到行首之间的所有文本</td></tr><tr><td>shift + up/down/left/right</td><td>按住 shift 和上下左右可以选中文本</td></tr><tr><td>鼠标点击某处，再按住 shift 点击另外一处</td><td>可以直接选中两次点击之间的所有文本</td></tr><tr><td>alt + left/right</td><td>向左/右跳一个单词</td></tr><tr><td>双击鼠标</td><td>选中最靠近的一个单词</td></tr><tr><td>三击鼠标</td><td>选中当前行</td></tr></tbody></table><p><strong>文本选择小技巧</strong></p><p>当我们按下 shift 之后我们就可以通过上下左右方向键来选择文本。这时候按住 cmd + 方向键的效果就带上了选择效果。比如 cmd + left 本来是跳转到光标所在行的最前面，加上了 shift 就自带了选中效果。 </p><p>所以如果你想选择当前光标所在的位置到文本最底部，按住 shift + cmd + down 就可以了，非常方便。 </p><p>这里的文本编辑快捷键是针对通用的文本编辑器而言的，喜欢 Vim/Emacs 的朋友也可以安装对应的插件，实现更加高效的操作。</p><p>比如在 Vim 里面，跳转到文档最顶部只需键入 gg 即可。选中当前光标到最顶部则只需 vgg，理论上是要更加省时间的做法。只是学习曲线要高得多，如非码农，一般也用不上。 </p><p>##四、截图类操作</p><table><thead><tr><th><strong>Key</strong></th><th><strong>Action</strong></th></tr></thead><tbody><tr><td>shift + cmd + 3</td><td>截当前全屏并存文件到桌面</td></tr><tr><td>ctrl + shift + cmd + 3</td><td>截当前全屏并保存到剪贴板</td></tr><tr><td>shift + cmd + 4</td><td>按下后拖拽鼠标选择截图区域，或者按下 space 直接截取当前窗口并保存到文件</td></tr><tr><td>ctrl + shift + cmd + 4</td><td>按下后拖拽鼠标选择截图区域，或者按下 space 直接截取当前窗口并保存到剪贴板</td></tr></tbody></table><h2 id="五、大多数-App-标准快捷键"><a href="#五、大多数-App-标准快捷键" class="headerlink" title="五、大多数 App 标准快捷键"></a>五、大多数 App 标准快捷键</h2><table><thead><tr><th><strong>Key</strong></th><th><strong>Action</strong></th></tr></thead><tbody><tr><td>cmd + ,</td><td>打开当前 App 的 Preferences 窗口</td></tr><tr><td>cmd + w</td><td>关闭当前窗口</td></tr><tr><td>cmd + 1/2/3</td><td>选中当前第 n 个窗口</td></tr><tr><td>ctrl + tab</td><td>切换到下一个窗口</td></tr><tr><td>shift + ctrl + tab</td><td>切换到上一个窗口</td></tr><tr><td>cmd + l</td><td>在 Safari/Chrome 中直接选中地址栏</td></tr><tr><td>cmd + r</td><td>在 Safari/Chrome 中刷新当前页</td></tr><tr><td>cmd + f</td><td>大部分支持搜索的 App 的搜索快捷键</td></tr><tr><td>cmd + opt + f</td><td>VSCode/Sublime 之类的 App 可以支持完整 Workspace 搜索</td></tr><tr><td>cmd + t</td><td>大部分多 Tab 应用支持以此创建新 Tab</td></tr><tr><td>cmd + shift + [</td><td>大部分多 Tab 应用支持以此往左切换 tab</td></tr><tr><td>cmd + shift + [</td><td>大部分多 Tab 应用支持以此往右切换 tab</td></tr><tr><td>cmd + shift + n</td><td>在 Finder 中创建新文件夹</td></tr></tbody></table><p>Apple 官方有一份非常详尽的快捷键列表，有兴趣的朋友可以到这里查看: <a href="https://support.apple.com/en-hk/HT201236">Mac keyboard shortcuts – Apple Support</a> </p>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-语法</title>
      <link href="/passages/JavaScrip-%E8%AF%AD%E6%B3%95/"/>
      <url>/passages/JavaScrip-%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="第二章：JavaScript语法"><a href="#第二章：JavaScript语法" class="headerlink" title="第二章：JavaScript语法"></a>第二章：JavaScript语法</h2><h3 id="变量赋值："><a href="#变量赋值：" class="headerlink" title="变量赋值："></a>变量赋值：</h3><ul><li>var age,mood;  // console.log(age,mood) 已定义的变量输出为undefined</li><li>console.log(a)  //  未定义的直接抛出错误 Uncaught ReferenceError: a is not defined</li></ul><h3 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h3><ul><li>JavaScript为弱语言类型  //  var age = ‘thirty’ ;  age = 33; 不会报错</li><li>字符串(String)<a id="more"></a></li></ul><blockquote><p>转义字符 “ \ ”</p></blockquote><p>示例： var mood = ‘don\‘t ask’ ;</p><p>var  height =”about 5 ‘10\“tall” ;</p><ul><li><p>数值(Number)</p><ul><li><p>整数</p></li><li><p>负数</p></li><li><p>浮点数(floating-point number)</p></li></ul></li><li><p>布尔值(boolean)</p><ul><li><p>true</p></li><li><p>false</p></li></ul></li><li><p>数组(Array)</p><ul><li><p>下标index+值value  的组合  index开始于0</p></li><li><p>length 数组长度</p></li><li><p>传统下标赋值（值可以有 任意基础类型）</p></li><li><p>二维数组嵌套  class[0][0]  第一班第一位</p></li></ul></li></ul><pre><code class="js">var people = [];people[&#39;name&#39;] = &#39;john&#39;;people[&#39;year&#39;] = 1940;</code></pre><blockquote><p>这样的数组叫做关联数组。由于可以使用字符串来代替数字值,因而代码更具有可读性。但是,这种用法并不是一个好习惯,不推荐大家使用。本质上,在创建关联数组时,你创建的是Aray对象的属性。在 JavaScript中,所有的变量实际上都是某种类型的对象。比如,一个布尔值就是一个 Boolean类型的对象,一个数组就是一个Aray类型的对象。在上面这个例子中,你实际上是给 lennon数组添加了name、year和 living三个属性。理想情况下,你不应该修改Aray对象的属性,而应该使用通用的对象( object)。</p></blockquote><ul><li><p>对象</p><ul><li><p>创建对象使用0bject关键字</p></li><li><p>var lennon ={ name: John”, year: 1940, living: false } // 创建对象</p></li></ul></li></ul><h3 id="操作（operation）"><a href="#操作（operation）" class="headerlink" title="操作（operation）"></a>操作（operation）</h3><ul><li><p>算数操作符</p><ul><li><p>加减乘除  + - * / </p></li><li><p>自增 自减  ++  -- </p></li><li><p>+连接字符串</p></li><li><p>+= -= *= /=   //  var a = a + 1 ;   a+=1 ;</p></li></ul></li></ul><blockquote><p>可进行字符串拼接  强制转换为字符串</p></blockquote><pre><code class="js">var year = 2018;var message = &quot;this year&quot; + year;console.log(message) // </code></pre><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><ul><li><p>if 条件语句 基本语法：</p><pre><code class="js">if(条件语句){ //条件为真 往下执行  //执行语句}if(1&gt;2) alert(&#39;false&#39;) //可写成一行</code></pre></li><li><p>比较操作符</p></li><li><p>大于 小于 大于等于 小于等于 相等 全等  不等于 不全等（&gt; &lt; &gt;= &lt;=  ==  ===  != !==）            </p></li><li><p>逻辑操作符</p><ul><li>或于切（|| 或、&amp;&amp; 且）</li><li>或 || 一个条件为真  就是真</li><li>且 两个条件为真 就是真  一个假就是假</li></ul></li></ul><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ul><li><p>while循环</p><pre><code class="js">while(条件){ //只要条件为true就执行  //执行语句}example ：var a = 1 ;while(a&lt;11){  a++;      }</code></pre></li><li><p>do while 循环</p><pre><code class="js">do{  //语句}while(条件) //先执行一次   //条件为真 继续运行 条件为假 退出</code></pre><pre><code></code></pre></li><li><p>for 循环</p><pre><code class="js">for(var i = 1; i&lt;9 ; i++){  //statement}</code></pre></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p>如果需要多次使用同一段代码,可以把它们封装成一个函数。函数( function)就是一组允<br>许在你的代码里随时调用的语句。事实上,每个函数实际上是一个短小的脚本。</p></blockquote><pre><code class="js">function(arguments){ //参数 形参  //执行语句  return &#39;&#39; //函数可以返回任意数据类型 包括函数}</code></pre><ul><li><p>变量作用域</p><ul><li><p>全局变量</p></li><li><p>局部变量</p><blockquote><p>判断全局还是局部变量需要用var来判断，当函数内部有var的时候，是局部变量，当函数里没有var的时候是全局变量</p></blockquote></li></ul><pre><code class="js">function get(num){  total = num * num;  return total;}var total = 33;var new = get(12);console.log(total) //144//调用过程中，total市全局变量，并不是局部变量，当函数调用修改的时候total的值也发生了变化//调整function get(num){  var total = num * num;  return total;}//此时total是get函数的局部变量</code></pre></li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><blockquote><p>对象( object)是一种非常重要的数据类型,但此前我们还没有认真对待它。对象是自包含<br>的数据集合,包含在对象里的数据可以通过两种形式访间—属性( property.)和方法( method):</p></blockquote><blockquote><p>属性是隶属于某个特定对象的变量;<br>方法是只有某个特定对象才能调用的函数</p></blockquote><ul><li><p>属性 property</p><ul><li>共同调用方法 “.” </li><li>隶属于对象的变量</li></ul></li><li><p>方法 method</p><ul><li>隶属于对象的方法</li><li>可执行函数</li></ul></li><li><p>实例对象（instance）</p><pre><code class="js">function Person(){    this.age = &#39;11&#39;  }</code></pre></li></ul><p>  //实例对象 操作符 new 通过实例化对象 把构造函数的属性和方法挂载到实例对象上<br>  var chenyu = new Person();<br>  console.log(chenyu.age)</p><pre><code>* 内建对象  * 数组对象Array  * 数学对象Math  * 日期对象Date* 宿主对象  &gt; 由浏览器提供的预定义对象被成为宿主对象  * document对象  * window对象</code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript-dom-编程艺术 </tag>
            
            <tag> DOM结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
